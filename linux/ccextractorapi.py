# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_ccextractorapi')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_ccextractorapi')
    _ccextractorapi = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ccextractorapi', [dirname(__file__)])
        except ImportError:
            import _ccextractorapi
            return _ccextractorapi
        try:
            _mod = imp.load_module('_ccextractorapi', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _ccextractorapi = swig_import_helper()
    del swig_import_helper
else:
    import _ccextractorapi
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0

VERSION = _ccextractorapi.VERSION
SUB_STREAMS_CNT = _ccextractorapi.SUB_STREAMS_CNT
TELETEXT_CHUNK_LEN = _ccextractorapi.TELETEXT_CHUNK_LEN
class file_report(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, file_report, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, file_report, name)
    __repr__ = _swig_repr
    __swig_setmethods__["width"] = _ccextractorapi.file_report_width_set
    __swig_getmethods__["width"] = _ccextractorapi.file_report_width_get
    if _newclass:
        width = _swig_property(_ccextractorapi.file_report_width_get, _ccextractorapi.file_report_width_set)
    __swig_setmethods__["height"] = _ccextractorapi.file_report_height_set
    __swig_getmethods__["height"] = _ccextractorapi.file_report_height_get
    if _newclass:
        height = _swig_property(_ccextractorapi.file_report_height_get, _ccextractorapi.file_report_height_set)
    __swig_setmethods__["aspect_ratio"] = _ccextractorapi.file_report_aspect_ratio_set
    __swig_getmethods__["aspect_ratio"] = _ccextractorapi.file_report_aspect_ratio_get
    if _newclass:
        aspect_ratio = _swig_property(_ccextractorapi.file_report_aspect_ratio_get, _ccextractorapi.file_report_aspect_ratio_set)
    __swig_setmethods__["frame_rate"] = _ccextractorapi.file_report_frame_rate_set
    __swig_getmethods__["frame_rate"] = _ccextractorapi.file_report_frame_rate_get
    if _newclass:
        frame_rate = _swig_property(_ccextractorapi.file_report_frame_rate_get, _ccextractorapi.file_report_frame_rate_set)
    __swig_setmethods__["data_from_608"] = _ccextractorapi.file_report_data_from_608_set
    __swig_getmethods__["data_from_608"] = _ccextractorapi.file_report_data_from_608_get
    if _newclass:
        data_from_608 = _swig_property(_ccextractorapi.file_report_data_from_608_get, _ccextractorapi.file_report_data_from_608_set)
    __swig_setmethods__["data_from_708"] = _ccextractorapi.file_report_data_from_708_set
    __swig_getmethods__["data_from_708"] = _ccextractorapi.file_report_data_from_708_get
    if _newclass:
        data_from_708 = _swig_property(_ccextractorapi.file_report_data_from_708_get, _ccextractorapi.file_report_data_from_708_set)
    __swig_setmethods__["mp4_cc_track_cnt"] = _ccextractorapi.file_report_mp4_cc_track_cnt_set
    __swig_getmethods__["mp4_cc_track_cnt"] = _ccextractorapi.file_report_mp4_cc_track_cnt_get
    if _newclass:
        mp4_cc_track_cnt = _swig_property(_ccextractorapi.file_report_mp4_cc_track_cnt_get, _ccextractorapi.file_report_mp4_cc_track_cnt_set)

    def __init__(self):
        this = _ccextractorapi.new_file_report()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ccextractorapi.delete_file_report
    __del__ = lambda self: None
file_report_swigregister = _ccextractorapi.file_report_swigregister
file_report_swigregister(file_report)

class ccx_s_teletext_config(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccx_s_teletext_config, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccx_s_teletext_config, name)
    __repr__ = _swig_repr
    __swig_setmethods__["verbose"] = _ccextractorapi.ccx_s_teletext_config_verbose_set
    __swig_getmethods__["verbose"] = _ccextractorapi.ccx_s_teletext_config_verbose_get
    if _newclass:
        verbose = _swig_property(_ccextractorapi.ccx_s_teletext_config_verbose_get, _ccextractorapi.ccx_s_teletext_config_verbose_set)
    __swig_setmethods__["page"] = _ccextractorapi.ccx_s_teletext_config_page_set
    __swig_getmethods__["page"] = _ccextractorapi.ccx_s_teletext_config_page_get
    if _newclass:
        page = _swig_property(_ccextractorapi.ccx_s_teletext_config_page_get, _ccextractorapi.ccx_s_teletext_config_page_set)
    __swig_setmethods__["tid"] = _ccextractorapi.ccx_s_teletext_config_tid_set
    __swig_getmethods__["tid"] = _ccextractorapi.ccx_s_teletext_config_tid_get
    if _newclass:
        tid = _swig_property(_ccextractorapi.ccx_s_teletext_config_tid_get, _ccextractorapi.ccx_s_teletext_config_tid_set)
    __swig_setmethods__["offset"] = _ccextractorapi.ccx_s_teletext_config_offset_set
    __swig_getmethods__["offset"] = _ccextractorapi.ccx_s_teletext_config_offset_get
    if _newclass:
        offset = _swig_property(_ccextractorapi.ccx_s_teletext_config_offset_get, _ccextractorapi.ccx_s_teletext_config_offset_set)
    __swig_setmethods__["bom"] = _ccextractorapi.ccx_s_teletext_config_bom_set
    __swig_getmethods__["bom"] = _ccextractorapi.ccx_s_teletext_config_bom_get
    if _newclass:
        bom = _swig_property(_ccextractorapi.ccx_s_teletext_config_bom_get, _ccextractorapi.ccx_s_teletext_config_bom_set)
    __swig_setmethods__["nonempty"] = _ccextractorapi.ccx_s_teletext_config_nonempty_set
    __swig_getmethods__["nonempty"] = _ccextractorapi.ccx_s_teletext_config_nonempty_get
    if _newclass:
        nonempty = _swig_property(_ccextractorapi.ccx_s_teletext_config_nonempty_get, _ccextractorapi.ccx_s_teletext_config_nonempty_set)
    __swig_setmethods__["user_page"] = _ccextractorapi.ccx_s_teletext_config_user_page_set
    __swig_getmethods__["user_page"] = _ccextractorapi.ccx_s_teletext_config_user_page_get
    if _newclass:
        user_page = _swig_property(_ccextractorapi.ccx_s_teletext_config_user_page_get, _ccextractorapi.ccx_s_teletext_config_user_page_set)
    __swig_setmethods__["levdistmincnt"] = _ccextractorapi.ccx_s_teletext_config_levdistmincnt_set
    __swig_getmethods__["levdistmincnt"] = _ccextractorapi.ccx_s_teletext_config_levdistmincnt_get
    if _newclass:
        levdistmincnt = _swig_property(_ccextractorapi.ccx_s_teletext_config_levdistmincnt_get, _ccextractorapi.ccx_s_teletext_config_levdistmincnt_set)
    __swig_setmethods__["levdistmaxpct"] = _ccextractorapi.ccx_s_teletext_config_levdistmaxpct_set
    __swig_getmethods__["levdistmaxpct"] = _ccextractorapi.ccx_s_teletext_config_levdistmaxpct_get
    if _newclass:
        levdistmaxpct = _swig_property(_ccextractorapi.ccx_s_teletext_config_levdistmaxpct_get, _ccextractorapi.ccx_s_teletext_config_levdistmaxpct_set)
    __swig_setmethods__["extraction_start"] = _ccextractorapi.ccx_s_teletext_config_extraction_start_set
    __swig_getmethods__["extraction_start"] = _ccextractorapi.ccx_s_teletext_config_extraction_start_get
    if _newclass:
        extraction_start = _swig_property(_ccextractorapi.ccx_s_teletext_config_extraction_start_get, _ccextractorapi.ccx_s_teletext_config_extraction_start_set)
    __swig_setmethods__["extraction_end"] = _ccextractorapi.ccx_s_teletext_config_extraction_end_set
    __swig_getmethods__["extraction_end"] = _ccextractorapi.ccx_s_teletext_config_extraction_end_get
    if _newclass:
        extraction_end = _swig_property(_ccextractorapi.ccx_s_teletext_config_extraction_end_get, _ccextractorapi.ccx_s_teletext_config_extraction_end_set)
    __swig_setmethods__["write_format"] = _ccextractorapi.ccx_s_teletext_config_write_format_set
    __swig_getmethods__["write_format"] = _ccextractorapi.ccx_s_teletext_config_write_format_get
    if _newclass:
        write_format = _swig_property(_ccextractorapi.ccx_s_teletext_config_write_format_get, _ccextractorapi.ccx_s_teletext_config_write_format_set)
    __swig_setmethods__["gui_mode_reports"] = _ccextractorapi.ccx_s_teletext_config_gui_mode_reports_set
    __swig_getmethods__["gui_mode_reports"] = _ccextractorapi.ccx_s_teletext_config_gui_mode_reports_get
    if _newclass:
        gui_mode_reports = _swig_property(_ccextractorapi.ccx_s_teletext_config_gui_mode_reports_get, _ccextractorapi.ccx_s_teletext_config_gui_mode_reports_set)
    __swig_setmethods__["date_format"] = _ccextractorapi.ccx_s_teletext_config_date_format_set
    __swig_getmethods__["date_format"] = _ccextractorapi.ccx_s_teletext_config_date_format_get
    if _newclass:
        date_format = _swig_property(_ccextractorapi.ccx_s_teletext_config_date_format_get, _ccextractorapi.ccx_s_teletext_config_date_format_set)
    __swig_setmethods__["noautotimeref"] = _ccextractorapi.ccx_s_teletext_config_noautotimeref_set
    __swig_getmethods__["noautotimeref"] = _ccextractorapi.ccx_s_teletext_config_noautotimeref_get
    if _newclass:
        noautotimeref = _swig_property(_ccextractorapi.ccx_s_teletext_config_noautotimeref_get, _ccextractorapi.ccx_s_teletext_config_noautotimeref_set)
    __swig_setmethods__["send_to_srv"] = _ccextractorapi.ccx_s_teletext_config_send_to_srv_set
    __swig_getmethods__["send_to_srv"] = _ccextractorapi.ccx_s_teletext_config_send_to_srv_get
    if _newclass:
        send_to_srv = _swig_property(_ccextractorapi.ccx_s_teletext_config_send_to_srv_get, _ccextractorapi.ccx_s_teletext_config_send_to_srv_set)
    __swig_setmethods__["encoding"] = _ccextractorapi.ccx_s_teletext_config_encoding_set
    __swig_getmethods__["encoding"] = _ccextractorapi.ccx_s_teletext_config_encoding_get
    if _newclass:
        encoding = _swig_property(_ccextractorapi.ccx_s_teletext_config_encoding_get, _ccextractorapi.ccx_s_teletext_config_encoding_set)
    __swig_setmethods__["nofontcolor"] = _ccextractorapi.ccx_s_teletext_config_nofontcolor_set
    __swig_getmethods__["nofontcolor"] = _ccextractorapi.ccx_s_teletext_config_nofontcolor_get
    if _newclass:
        nofontcolor = _swig_property(_ccextractorapi.ccx_s_teletext_config_nofontcolor_get, _ccextractorapi.ccx_s_teletext_config_nofontcolor_set)
    __swig_setmethods__["nohtmlescape"] = _ccextractorapi.ccx_s_teletext_config_nohtmlescape_set
    __swig_getmethods__["nohtmlescape"] = _ccextractorapi.ccx_s_teletext_config_nohtmlescape_get
    if _newclass:
        nohtmlescape = _swig_property(_ccextractorapi.ccx_s_teletext_config_nohtmlescape_get, _ccextractorapi.ccx_s_teletext_config_nohtmlescape_set)
    __swig_setmethods__["millis_separator"] = _ccextractorapi.ccx_s_teletext_config_millis_separator_set
    __swig_getmethods__["millis_separator"] = _ccextractorapi.ccx_s_teletext_config_millis_separator_get
    if _newclass:
        millis_separator = _swig_property(_ccextractorapi.ccx_s_teletext_config_millis_separator_get, _ccextractorapi.ccx_s_teletext_config_millis_separator_set)

    def __init__(self):
        this = _ccextractorapi.new_ccx_s_teletext_config()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ccextractorapi.delete_ccx_s_teletext_config
    __del__ = lambda self: None
ccx_s_teletext_config_swigregister = _ccextractorapi.ccx_s_teletext_config_swigregister
ccx_s_teletext_config_swigregister(ccx_s_teletext_config)

class ccx_s_mp4Cfg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccx_s_mp4Cfg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccx_s_mp4Cfg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mp4vidtrack"] = _ccextractorapi.ccx_s_mp4Cfg_mp4vidtrack_set
    __swig_getmethods__["mp4vidtrack"] = _ccextractorapi.ccx_s_mp4Cfg_mp4vidtrack_get
    if _newclass:
        mp4vidtrack = _swig_property(_ccextractorapi.ccx_s_mp4Cfg_mp4vidtrack_get, _ccextractorapi.ccx_s_mp4Cfg_mp4vidtrack_set)

    def __init__(self):
        this = _ccextractorapi.new_ccx_s_mp4Cfg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ccextractorapi.delete_ccx_s_mp4Cfg
    __del__ = lambda self: None
ccx_s_mp4Cfg_swigregister = _ccextractorapi.ccx_s_mp4Cfg_swigregister
ccx_s_mp4Cfg_swigregister(ccx_s_mp4Cfg)

class lib_ccx_ctx(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, lib_ccx_ctx, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, lib_ccx_ctx, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pesheaderbuf"] = _ccextractorapi.lib_ccx_ctx_pesheaderbuf_set
    __swig_getmethods__["pesheaderbuf"] = _ccextractorapi.lib_ccx_ctx_pesheaderbuf_get
    if _newclass:
        pesheaderbuf = _swig_property(_ccextractorapi.lib_ccx_ctx_pesheaderbuf_get, _ccextractorapi.lib_ccx_ctx_pesheaderbuf_set)
    __swig_setmethods__["inputsize"] = _ccextractorapi.lib_ccx_ctx_inputsize_set
    __swig_getmethods__["inputsize"] = _ccextractorapi.lib_ccx_ctx_inputsize_get
    if _newclass:
        inputsize = _swig_property(_ccextractorapi.lib_ccx_ctx_inputsize_get, _ccextractorapi.lib_ccx_ctx_inputsize_set)
    __swig_setmethods__["total_inputsize"] = _ccextractorapi.lib_ccx_ctx_total_inputsize_set
    __swig_getmethods__["total_inputsize"] = _ccextractorapi.lib_ccx_ctx_total_inputsize_get
    if _newclass:
        total_inputsize = _swig_property(_ccextractorapi.lib_ccx_ctx_total_inputsize_get, _ccextractorapi.lib_ccx_ctx_total_inputsize_set)
    __swig_setmethods__["total_past"] = _ccextractorapi.lib_ccx_ctx_total_past_set
    __swig_getmethods__["total_past"] = _ccextractorapi.lib_ccx_ctx_total_past_get
    if _newclass:
        total_past = _swig_property(_ccextractorapi.lib_ccx_ctx_total_past_get, _ccextractorapi.lib_ccx_ctx_total_past_set)
    __swig_setmethods__["last_reported_progress"] = _ccextractorapi.lib_ccx_ctx_last_reported_progress_set
    __swig_getmethods__["last_reported_progress"] = _ccextractorapi.lib_ccx_ctx_last_reported_progress_get
    if _newclass:
        last_reported_progress = _swig_property(_ccextractorapi.lib_ccx_ctx_last_reported_progress_get, _ccextractorapi.lib_ccx_ctx_last_reported_progress_set)
    __swig_setmethods__["stat_numuserheaders"] = _ccextractorapi.lib_ccx_ctx_stat_numuserheaders_set
    __swig_getmethods__["stat_numuserheaders"] = _ccextractorapi.lib_ccx_ctx_stat_numuserheaders_get
    if _newclass:
        stat_numuserheaders = _swig_property(_ccextractorapi.lib_ccx_ctx_stat_numuserheaders_get, _ccextractorapi.lib_ccx_ctx_stat_numuserheaders_set)
    __swig_setmethods__["stat_dvdccheaders"] = _ccextractorapi.lib_ccx_ctx_stat_dvdccheaders_set
    __swig_getmethods__["stat_dvdccheaders"] = _ccextractorapi.lib_ccx_ctx_stat_dvdccheaders_get
    if _newclass:
        stat_dvdccheaders = _swig_property(_ccextractorapi.lib_ccx_ctx_stat_dvdccheaders_get, _ccextractorapi.lib_ccx_ctx_stat_dvdccheaders_set)
    __swig_setmethods__["stat_scte20ccheaders"] = _ccextractorapi.lib_ccx_ctx_stat_scte20ccheaders_set
    __swig_getmethods__["stat_scte20ccheaders"] = _ccextractorapi.lib_ccx_ctx_stat_scte20ccheaders_get
    if _newclass:
        stat_scte20ccheaders = _swig_property(_ccextractorapi.lib_ccx_ctx_stat_scte20ccheaders_get, _ccextractorapi.lib_ccx_ctx_stat_scte20ccheaders_set)
    __swig_setmethods__["stat_replay5000headers"] = _ccextractorapi.lib_ccx_ctx_stat_replay5000headers_set
    __swig_getmethods__["stat_replay5000headers"] = _ccextractorapi.lib_ccx_ctx_stat_replay5000headers_get
    if _newclass:
        stat_replay5000headers = _swig_property(_ccextractorapi.lib_ccx_ctx_stat_replay5000headers_get, _ccextractorapi.lib_ccx_ctx_stat_replay5000headers_set)
    __swig_setmethods__["stat_replay4000headers"] = _ccextractorapi.lib_ccx_ctx_stat_replay4000headers_set
    __swig_getmethods__["stat_replay4000headers"] = _ccextractorapi.lib_ccx_ctx_stat_replay4000headers_get
    if _newclass:
        stat_replay4000headers = _swig_property(_ccextractorapi.lib_ccx_ctx_stat_replay4000headers_get, _ccextractorapi.lib_ccx_ctx_stat_replay4000headers_set)
    __swig_setmethods__["stat_dishheaders"] = _ccextractorapi.lib_ccx_ctx_stat_dishheaders_set
    __swig_getmethods__["stat_dishheaders"] = _ccextractorapi.lib_ccx_ctx_stat_dishheaders_get
    if _newclass:
        stat_dishheaders = _swig_property(_ccextractorapi.lib_ccx_ctx_stat_dishheaders_get, _ccextractorapi.lib_ccx_ctx_stat_dishheaders_set)
    __swig_setmethods__["stat_hdtv"] = _ccextractorapi.lib_ccx_ctx_stat_hdtv_set
    __swig_getmethods__["stat_hdtv"] = _ccextractorapi.lib_ccx_ctx_stat_hdtv_get
    if _newclass:
        stat_hdtv = _swig_property(_ccextractorapi.lib_ccx_ctx_stat_hdtv_get, _ccextractorapi.lib_ccx_ctx_stat_hdtv_set)
    __swig_setmethods__["stat_divicom"] = _ccextractorapi.lib_ccx_ctx_stat_divicom_set
    __swig_getmethods__["stat_divicom"] = _ccextractorapi.lib_ccx_ctx_stat_divicom_get
    if _newclass:
        stat_divicom = _swig_property(_ccextractorapi.lib_ccx_ctx_stat_divicom_get, _ccextractorapi.lib_ccx_ctx_stat_divicom_set)
    __swig_setmethods__["false_pict_header"] = _ccextractorapi.lib_ccx_ctx_false_pict_header_set
    __swig_getmethods__["false_pict_header"] = _ccextractorapi.lib_ccx_ctx_false_pict_header_get
    if _newclass:
        false_pict_header = _swig_property(_ccextractorapi.lib_ccx_ctx_false_pict_header_get, _ccextractorapi.lib_ccx_ctx_false_pict_header_set)
    __swig_setmethods__["dec_global_setting"] = _ccextractorapi.lib_ccx_ctx_dec_global_setting_set
    __swig_getmethods__["dec_global_setting"] = _ccextractorapi.lib_ccx_ctx_dec_global_setting_get
    if _newclass:
        dec_global_setting = _swig_property(_ccextractorapi.lib_ccx_ctx_dec_global_setting_get, _ccextractorapi.lib_ccx_ctx_dec_global_setting_set)
    __swig_setmethods__["dec_ctx_head"] = _ccextractorapi.lib_ccx_ctx_dec_ctx_head_set
    __swig_getmethods__["dec_ctx_head"] = _ccextractorapi.lib_ccx_ctx_dec_ctx_head_get
    if _newclass:
        dec_ctx_head = _swig_property(_ccextractorapi.lib_ccx_ctx_dec_ctx_head_get, _ccextractorapi.lib_ccx_ctx_dec_ctx_head_set)
    __swig_setmethods__["rawmode"] = _ccextractorapi.lib_ccx_ctx_rawmode_set
    __swig_getmethods__["rawmode"] = _ccextractorapi.lib_ccx_ctx_rawmode_get
    if _newclass:
        rawmode = _swig_property(_ccextractorapi.lib_ccx_ctx_rawmode_get, _ccextractorapi.lib_ccx_ctx_rawmode_set)
    __swig_setmethods__["cc_to_stdout"] = _ccextractorapi.lib_ccx_ctx_cc_to_stdout_set
    __swig_getmethods__["cc_to_stdout"] = _ccextractorapi.lib_ccx_ctx_cc_to_stdout_get
    if _newclass:
        cc_to_stdout = _swig_property(_ccextractorapi.lib_ccx_ctx_cc_to_stdout_get, _ccextractorapi.lib_ccx_ctx_cc_to_stdout_set)
    __swig_setmethods__["pes_header_to_stdout"] = _ccextractorapi.lib_ccx_ctx_pes_header_to_stdout_set
    __swig_getmethods__["pes_header_to_stdout"] = _ccextractorapi.lib_ccx_ctx_pes_header_to_stdout_get
    if _newclass:
        pes_header_to_stdout = _swig_property(_ccextractorapi.lib_ccx_ctx_pes_header_to_stdout_get, _ccextractorapi.lib_ccx_ctx_pes_header_to_stdout_set)
    __swig_setmethods__["dvb_debug_traces_to_stdout"] = _ccextractorapi.lib_ccx_ctx_dvb_debug_traces_to_stdout_set
    __swig_getmethods__["dvb_debug_traces_to_stdout"] = _ccextractorapi.lib_ccx_ctx_dvb_debug_traces_to_stdout_get
    if _newclass:
        dvb_debug_traces_to_stdout = _swig_property(_ccextractorapi.lib_ccx_ctx_dvb_debug_traces_to_stdout_get, _ccextractorapi.lib_ccx_ctx_dvb_debug_traces_to_stdout_set)
    __swig_setmethods__["ignore_pts_jumps"] = _ccextractorapi.lib_ccx_ctx_ignore_pts_jumps_set
    __swig_getmethods__["ignore_pts_jumps"] = _ccextractorapi.lib_ccx_ctx_ignore_pts_jumps_get
    if _newclass:
        ignore_pts_jumps = _swig_property(_ccextractorapi.lib_ccx_ctx_ignore_pts_jumps_get, _ccextractorapi.lib_ccx_ctx_ignore_pts_jumps_set)
    __swig_setmethods__["subs_delay"] = _ccextractorapi.lib_ccx_ctx_subs_delay_set
    __swig_getmethods__["subs_delay"] = _ccextractorapi.lib_ccx_ctx_subs_delay_get
    if _newclass:
        subs_delay = _swig_property(_ccextractorapi.lib_ccx_ctx_subs_delay_get, _ccextractorapi.lib_ccx_ctx_subs_delay_set)
    __swig_setmethods__["startcredits_displayed"] = _ccextractorapi.lib_ccx_ctx_startcredits_displayed_set
    __swig_getmethods__["startcredits_displayed"] = _ccextractorapi.lib_ccx_ctx_startcredits_displayed_get
    if _newclass:
        startcredits_displayed = _swig_property(_ccextractorapi.lib_ccx_ctx_startcredits_displayed_get, _ccextractorapi.lib_ccx_ctx_startcredits_displayed_set)
    __swig_setmethods__["end_credits_displayed"] = _ccextractorapi.lib_ccx_ctx_end_credits_displayed_set
    __swig_getmethods__["end_credits_displayed"] = _ccextractorapi.lib_ccx_ctx_end_credits_displayed_get
    if _newclass:
        end_credits_displayed = _swig_property(_ccextractorapi.lib_ccx_ctx_end_credits_displayed_get, _ccextractorapi.lib_ccx_ctx_end_credits_displayed_set)
    __swig_setmethods__["last_displayed_subs_ms"] = _ccextractorapi.lib_ccx_ctx_last_displayed_subs_ms_set
    __swig_getmethods__["last_displayed_subs_ms"] = _ccextractorapi.lib_ccx_ctx_last_displayed_subs_ms_get
    if _newclass:
        last_displayed_subs_ms = _swig_property(_ccextractorapi.lib_ccx_ctx_last_displayed_subs_ms_get, _ccextractorapi.lib_ccx_ctx_last_displayed_subs_ms_set)
    __swig_setmethods__["screens_to_process"] = _ccextractorapi.lib_ccx_ctx_screens_to_process_set
    __swig_getmethods__["screens_to_process"] = _ccextractorapi.lib_ccx_ctx_screens_to_process_get
    if _newclass:
        screens_to_process = _swig_property(_ccextractorapi.lib_ccx_ctx_screens_to_process_get, _ccextractorapi.lib_ccx_ctx_screens_to_process_set)
    __swig_setmethods__["basefilename"] = _ccextractorapi.lib_ccx_ctx_basefilename_set
    __swig_getmethods__["basefilename"] = _ccextractorapi.lib_ccx_ctx_basefilename_get
    if _newclass:
        basefilename = _swig_property(_ccextractorapi.lib_ccx_ctx_basefilename_get, _ccextractorapi.lib_ccx_ctx_basefilename_set)
    __swig_setmethods__["extension"] = _ccextractorapi.lib_ccx_ctx_extension_set
    __swig_getmethods__["extension"] = _ccextractorapi.lib_ccx_ctx_extension_get
    if _newclass:
        extension = _swig_property(_ccextractorapi.lib_ccx_ctx_extension_get, _ccextractorapi.lib_ccx_ctx_extension_set)
    __swig_setmethods__["current_file"] = _ccextractorapi.lib_ccx_ctx_current_file_set
    __swig_getmethods__["current_file"] = _ccextractorapi.lib_ccx_ctx_current_file_get
    if _newclass:
        current_file = _swig_property(_ccextractorapi.lib_ccx_ctx_current_file_get, _ccextractorapi.lib_ccx_ctx_current_file_set)
    __swig_setmethods__["inputfile"] = _ccextractorapi.lib_ccx_ctx_inputfile_set
    __swig_getmethods__["inputfile"] = _ccextractorapi.lib_ccx_ctx_inputfile_get
    if _newclass:
        inputfile = _swig_property(_ccextractorapi.lib_ccx_ctx_inputfile_get, _ccextractorapi.lib_ccx_ctx_inputfile_set)
    __swig_setmethods__["num_input_files"] = _ccextractorapi.lib_ccx_ctx_num_input_files_set
    __swig_getmethods__["num_input_files"] = _ccextractorapi.lib_ccx_ctx_num_input_files_get
    if _newclass:
        num_input_files = _swig_property(_ccextractorapi.lib_ccx_ctx_num_input_files_get, _ccextractorapi.lib_ccx_ctx_num_input_files_set)
    __swig_setmethods__["teletext_warning_shown"] = _ccextractorapi.lib_ccx_ctx_teletext_warning_shown_set
    __swig_getmethods__["teletext_warning_shown"] = _ccextractorapi.lib_ccx_ctx_teletext_warning_shown_get
    if _newclass:
        teletext_warning_shown = _swig_property(_ccextractorapi.lib_ccx_ctx_teletext_warning_shown_get, _ccextractorapi.lib_ccx_ctx_teletext_warning_shown_set)
    __swig_setmethods__["epg_inited"] = _ccextractorapi.lib_ccx_ctx_epg_inited_set
    __swig_getmethods__["epg_inited"] = _ccextractorapi.lib_ccx_ctx_epg_inited_get
    if _newclass:
        epg_inited = _swig_property(_ccextractorapi.lib_ccx_ctx_epg_inited_get, _ccextractorapi.lib_ccx_ctx_epg_inited_set)
    __swig_setmethods__["epg_buffers"] = _ccextractorapi.lib_ccx_ctx_epg_buffers_set
    __swig_getmethods__["epg_buffers"] = _ccextractorapi.lib_ccx_ctx_epg_buffers_get
    if _newclass:
        epg_buffers = _swig_property(_ccextractorapi.lib_ccx_ctx_epg_buffers_get, _ccextractorapi.lib_ccx_ctx_epg_buffers_set)
    __swig_setmethods__["eit_programs"] = _ccextractorapi.lib_ccx_ctx_eit_programs_set
    __swig_getmethods__["eit_programs"] = _ccextractorapi.lib_ccx_ctx_eit_programs_get
    if _newclass:
        eit_programs = _swig_property(_ccextractorapi.lib_ccx_ctx_eit_programs_get, _ccextractorapi.lib_ccx_ctx_eit_programs_set)
    __swig_setmethods__["eit_current_events"] = _ccextractorapi.lib_ccx_ctx_eit_current_events_set
    __swig_getmethods__["eit_current_events"] = _ccextractorapi.lib_ccx_ctx_eit_current_events_get
    if _newclass:
        eit_current_events = _swig_property(_ccextractorapi.lib_ccx_ctx_eit_current_events_get, _ccextractorapi.lib_ccx_ctx_eit_current_events_set)
    __swig_setmethods__["ATSC_source_pg_map"] = _ccextractorapi.lib_ccx_ctx_ATSC_source_pg_map_set
    __swig_getmethods__["ATSC_source_pg_map"] = _ccextractorapi.lib_ccx_ctx_ATSC_source_pg_map_get
    if _newclass:
        ATSC_source_pg_map = _swig_property(_ccextractorapi.lib_ccx_ctx_ATSC_source_pg_map_get, _ccextractorapi.lib_ccx_ctx_ATSC_source_pg_map_set)
    __swig_setmethods__["epg_last_output"] = _ccextractorapi.lib_ccx_ctx_epg_last_output_set
    __swig_getmethods__["epg_last_output"] = _ccextractorapi.lib_ccx_ctx_epg_last_output_get
    if _newclass:
        epg_last_output = _swig_property(_ccextractorapi.lib_ccx_ctx_epg_last_output_get, _ccextractorapi.lib_ccx_ctx_epg_last_output_set)
    __swig_setmethods__["epg_last_live_output"] = _ccextractorapi.lib_ccx_ctx_epg_last_live_output_set
    __swig_getmethods__["epg_last_live_output"] = _ccextractorapi.lib_ccx_ctx_epg_last_live_output_get
    if _newclass:
        epg_last_live_output = _swig_property(_ccextractorapi.lib_ccx_ctx_epg_last_live_output_get, _ccextractorapi.lib_ccx_ctx_epg_last_live_output_set)
    __swig_setmethods__["freport"] = _ccextractorapi.lib_ccx_ctx_freport_set
    __swig_getmethods__["freport"] = _ccextractorapi.lib_ccx_ctx_freport_get
    if _newclass:
        freport = _swig_property(_ccextractorapi.lib_ccx_ctx_freport_get, _ccextractorapi.lib_ccx_ctx_freport_set)
    __swig_setmethods__["hauppauge_mode"] = _ccextractorapi.lib_ccx_ctx_hauppauge_mode_set
    __swig_getmethods__["hauppauge_mode"] = _ccextractorapi.lib_ccx_ctx_hauppauge_mode_get
    if _newclass:
        hauppauge_mode = _swig_property(_ccextractorapi.lib_ccx_ctx_hauppauge_mode_get, _ccextractorapi.lib_ccx_ctx_hauppauge_mode_set)
    __swig_setmethods__["live_stream"] = _ccextractorapi.lib_ccx_ctx_live_stream_set
    __swig_getmethods__["live_stream"] = _ccextractorapi.lib_ccx_ctx_live_stream_get
    if _newclass:
        live_stream = _swig_property(_ccextractorapi.lib_ccx_ctx_live_stream_get, _ccextractorapi.lib_ccx_ctx_live_stream_set)
    __swig_setmethods__["binary_concat"] = _ccextractorapi.lib_ccx_ctx_binary_concat_set
    __swig_getmethods__["binary_concat"] = _ccextractorapi.lib_ccx_ctx_binary_concat_get
    if _newclass:
        binary_concat = _swig_property(_ccextractorapi.lib_ccx_ctx_binary_concat_get, _ccextractorapi.lib_ccx_ctx_binary_concat_set)
    __swig_setmethods__["multiprogram"] = _ccextractorapi.lib_ccx_ctx_multiprogram_set
    __swig_getmethods__["multiprogram"] = _ccextractorapi.lib_ccx_ctx_multiprogram_get
    if _newclass:
        multiprogram = _swig_property(_ccextractorapi.lib_ccx_ctx_multiprogram_get, _ccextractorapi.lib_ccx_ctx_multiprogram_set)
    __swig_setmethods__["write_format"] = _ccextractorapi.lib_ccx_ctx_write_format_set
    __swig_getmethods__["write_format"] = _ccextractorapi.lib_ccx_ctx_write_format_get
    if _newclass:
        write_format = _swig_property(_ccextractorapi.lib_ccx_ctx_write_format_get, _ccextractorapi.lib_ccx_ctx_write_format_set)
    __swig_setmethods__["demux_ctx"] = _ccextractorapi.lib_ccx_ctx_demux_ctx_set
    __swig_getmethods__["demux_ctx"] = _ccextractorapi.lib_ccx_ctx_demux_ctx_get
    if _newclass:
        demux_ctx = _swig_property(_ccextractorapi.lib_ccx_ctx_demux_ctx_get, _ccextractorapi.lib_ccx_ctx_demux_ctx_set)
    __swig_setmethods__["enc_ctx_head"] = _ccextractorapi.lib_ccx_ctx_enc_ctx_head_set
    __swig_getmethods__["enc_ctx_head"] = _ccextractorapi.lib_ccx_ctx_enc_ctx_head_get
    if _newclass:
        enc_ctx_head = _swig_property(_ccextractorapi.lib_ccx_ctx_enc_ctx_head_get, _ccextractorapi.lib_ccx_ctx_enc_ctx_head_set)
    __swig_setmethods__["mp4_cfg"] = _ccextractorapi.lib_ccx_ctx_mp4_cfg_set
    __swig_getmethods__["mp4_cfg"] = _ccextractorapi.lib_ccx_ctx_mp4_cfg_get
    if _newclass:
        mp4_cfg = _swig_property(_ccextractorapi.lib_ccx_ctx_mp4_cfg_get, _ccextractorapi.lib_ccx_ctx_mp4_cfg_set)
    __swig_setmethods__["out_interval"] = _ccextractorapi.lib_ccx_ctx_out_interval_set
    __swig_getmethods__["out_interval"] = _ccextractorapi.lib_ccx_ctx_out_interval_get
    if _newclass:
        out_interval = _swig_property(_ccextractorapi.lib_ccx_ctx_out_interval_get, _ccextractorapi.lib_ccx_ctx_out_interval_set)
    __swig_setmethods__["segment_counter"] = _ccextractorapi.lib_ccx_ctx_segment_counter_set
    __swig_getmethods__["segment_counter"] = _ccextractorapi.lib_ccx_ctx_segment_counter_get
    if _newclass:
        segment_counter = _swig_property(_ccextractorapi.lib_ccx_ctx_segment_counter_get, _ccextractorapi.lib_ccx_ctx_segment_counter_set)
    __swig_setmethods__["system_start_time"] = _ccextractorapi.lib_ccx_ctx_system_start_time_set
    __swig_getmethods__["system_start_time"] = _ccextractorapi.lib_ccx_ctx_system_start_time_get
    if _newclass:
        system_start_time = _swig_property(_ccextractorapi.lib_ccx_ctx_system_start_time_get, _ccextractorapi.lib_ccx_ctx_system_start_time_set)

    def __init__(self):
        this = _ccextractorapi.new_lib_ccx_ctx()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ccextractorapi.delete_lib_ccx_ctx
    __del__ = lambda self: None
lib_ccx_ctx_swigregister = _ccextractorapi.lib_ccx_ctx_swigregister
lib_ccx_ctx_swigregister(lib_ccx_ctx)


def init_libraries(opt):
    return _ccextractorapi.init_libraries(opt)
init_libraries = _ccextractorapi.init_libraries

def dinit_libraries(ctx):
    return _ccextractorapi.dinit_libraries(ctx)
dinit_libraries = _ccextractorapi.dinit_libraries

def print_end_msg():
    return _ccextractorapi.print_end_msg()
print_end_msg = _ccextractorapi.print_end_msg

def parse_parameters(opt, argc, argv):
    return _ccextractorapi.parse_parameters(opt, argc, argv)
parse_parameters = _ccextractorapi.parse_parameters

def print_usage():
    return _ccextractorapi.print_usage()
print_usage = _ccextractorapi.print_usage

def detect_input_file_overwrite(ctx, output_filename):
    return _ccextractorapi.detect_input_file_overwrite(ctx, output_filename)
detect_input_file_overwrite = _ccextractorapi.detect_input_file_overwrite

def atoi_hex(s):
    return _ccextractorapi.atoi_hex(s)
atoi_hex = _ccextractorapi.atoi_hex

def stringztoms(s, bt):
    return _ccextractorapi.stringztoms(s, bt)
stringztoms = _ccextractorapi.stringztoms

def position_sanity_check(ctx):
    return _ccextractorapi.position_sanity_check(ctx)
position_sanity_check = _ccextractorapi.position_sanity_check

def init_file_buffer(ctx):
    return _ccextractorapi.init_file_buffer(ctx)
init_file_buffer = _ccextractorapi.init_file_buffer

def ps_get_more_data(ctx, ppdata):
    return _ccextractorapi.ps_get_more_data(ctx, ppdata)
ps_get_more_data = _ccextractorapi.ps_get_more_data

def general_get_more_data(ctx, data):
    return _ccextractorapi.general_get_more_data(ctx, data)
general_get_more_data = _ccextractorapi.general_get_more_data

def raw_loop(ctx):
    return _ccextractorapi.raw_loop(ctx)
raw_loop = _ccextractorapi.raw_loop

def process_raw(ctx, sub, buffer, len):
    return _ccextractorapi.process_raw(ctx, sub, buffer, len)
process_raw = _ccextractorapi.process_raw

def general_loop(ctx):
    return _ccextractorapi.general_loop(ctx)
general_loop = _ccextractorapi.general_loop

def process_hex(filename):
    return _ccextractorapi.process_hex(filename)
process_hex = _ccextractorapi.process_hex

def rcwt_loop(ctx):
    return _ccextractorapi.rcwt_loop(ctx)
rcwt_loop = _ccextractorapi.rcwt_loop

def asf_get_more_data(ctx, ppdata):
    return _ccextractorapi.asf_get_more_data(ctx, ppdata)
asf_get_more_data = _ccextractorapi.asf_get_more_data

def wtv_get_more_data(ctx, ppdata):
    return _ccextractorapi.wtv_get_more_data(ctx, ppdata)
wtv_get_more_data = _ccextractorapi.wtv_get_more_data

def process_m2v(ctx, data, length, sub):
    return _ccextractorapi.process_m2v(ctx, data, length, sub)
process_m2v = _ccextractorapi.process_m2v

def user_data(ctx, ustream, udtype, sub):
    return _ccextractorapi.user_data(ctx, ustream, udtype, sub)
user_data = _ccextractorapi.user_data

def get_file_size(arg1):
    return _ccextractorapi.get_file_size(arg1)
get_file_size = _ccextractorapi.get_file_size

def get_total_file_size(ctx):
    return _ccextractorapi.get_total_file_size(ctx)
get_total_file_size = _ccextractorapi.get_total_file_size

def prepare_for_new_file(ctx):
    return _ccextractorapi.prepare_for_new_file(ctx)
prepare_for_new_file = _ccextractorapi.prepare_for_new_file

def close_input_file(ctx):
    return _ccextractorapi.close_input_file(ctx)
close_input_file = _ccextractorapi.close_input_file

def switch_to_next_file(ctx, bytesinbuffer):
    return _ccextractorapi.switch_to_next_file(ctx, bytesinbuffer)
switch_to_next_file = _ccextractorapi.switch_to_next_file

def return_to_buffer(ctx, buffer, bytes):
    return _ccextractorapi.return_to_buffer(ctx, buffer, bytes)
return_to_buffer = _ccextractorapi.return_to_buffer

def init_hdcc(ctx):
    return _ccextractorapi.init_hdcc(ctx)
init_hdcc = _ccextractorapi.init_hdcc

def store_hdcc(ctx, cc_data, cc_count, sequence_number, current_fts_now, sub):
    return _ccextractorapi.store_hdcc(ctx, cc_data, cc_count, sequence_number, current_fts_now, sub)
store_hdcc = _ccextractorapi.store_hdcc

def anchor_hdcc(ctx, seq):
    return _ccextractorapi.anchor_hdcc(ctx, seq)
anchor_hdcc = _ccextractorapi.anchor_hdcc

def process_hdcc(ctx, sub):
    return _ccextractorapi.process_hdcc(ctx, sub)
process_hdcc = _ccextractorapi.process_hdcc

def params_dump(ctx):
    return _ccextractorapi.params_dump(ctx)
params_dump = _ccextractorapi.params_dump

def print_file_report(ctx):
    return _ccextractorapi.print_file_report(ctx)
print_file_report = _ccextractorapi.print_file_report

def dinit_write(wb):
    return _ccextractorapi.dinit_write(wb)
dinit_write = _ccextractorapi.dinit_write

def temporarily_open_output(wb):
    return _ccextractorapi.temporarily_open_output(wb)
temporarily_open_output = _ccextractorapi.temporarily_open_output

def temporarily_close_output(wb):
    return _ccextractorapi.temporarily_close_output(wb)
temporarily_close_output = _ccextractorapi.temporarily_close_output

def init_write(wb, filename, with_semaphore):
    return _ccextractorapi.init_write(wb, filename, with_semaphore)
init_write = _ccextractorapi.init_write

def writeraw(data, length, private_data, sub):
    return _ccextractorapi.writeraw(data, length, private_data, sub)
writeraw = _ccextractorapi.writeraw

def flushbuffer(ctx, wb, closefile):
    return _ccextractorapi.flushbuffer(ctx, wb, closefile)
flushbuffer = _ccextractorapi.flushbuffer

def writercwtdata(ctx, data, sub):
    return _ccextractorapi.writercwtdata(ctx, data, sub)
writercwtdata = _ccextractorapi.writercwtdata

def isValidMP4Box(buffer, position, nextBoxLocation, boxScore):
    return _ccextractorapi.isValidMP4Box(buffer, position, nextBoxLocation, boxScore)
isValidMP4Box = _ccextractorapi.isValidMP4Box

def detect_stream_type(ctx):
    return _ccextractorapi.detect_stream_type(ctx)
detect_stream_type = _ccextractorapi.detect_stream_type

def detect_myth(ctx):
    return _ccextractorapi.detect_myth(ctx)
detect_myth = _ccextractorapi.detect_myth

def read_video_pes_header(ctx, data, nextheader, headerlength, sbuflen):
    return _ccextractorapi.read_video_pes_header(ctx, data, nextheader, headerlength, sbuflen)
read_video_pes_header = _ccextractorapi.read_video_pes_header

def init_ts(ctx):
    return _ccextractorapi.init_ts(ctx)
init_ts = _ccextractorapi.init_ts

def ts_readpacket(ctx, payload):
    return _ccextractorapi.ts_readpacket(ctx, payload)
ts_readpacket = _ccextractorapi.ts_readpacket

def ts_readstream(ctx, data):
    return _ccextractorapi.ts_readstream(ctx, data)
ts_readstream = _ccextractorapi.ts_readstream

def ts_get_more_data(ctx, data):
    return _ccextractorapi.ts_get_more_data(ctx, data)
ts_get_more_data = _ccextractorapi.ts_get_more_data

def write_section(ctx, payload, buf, size, pinfo):
    return _ccextractorapi.write_section(ctx, payload, buf, size, pinfo)
write_section = _ccextractorapi.write_section

def ts_buffer_psi_packet(ctx):
    return _ccextractorapi.ts_buffer_psi_packet(ctx)
ts_buffer_psi_packet = _ccextractorapi.ts_buffer_psi_packet

def parse_PMT(ctx, buf, len, pinfo):
    return _ccextractorapi.parse_PMT(ctx, buf, len, pinfo)
parse_PMT = _ccextractorapi.parse_PMT

def parse_PAT(ctx):
    return _ccextractorapi.parse_PAT(ctx)
parse_PAT = _ccextractorapi.parse_PAT

def parse_EPG_packet(ctx):
    return _ccextractorapi.parse_EPG_packet(ctx)
parse_EPG_packet = _ccextractorapi.parse_EPG_packet

def EPG_free(ctx):
    return _ccextractorapi.EPG_free(ctx)
EPG_free = _ccextractorapi.EPG_free

def EPG_DVB_decode_string(arg1, size):
    return _ccextractorapi.EPG_DVB_decode_string(arg1, size)
EPG_DVB_decode_string = _ccextractorapi.EPG_DVB_decode_string

def parse_SDT(ctx):
    return _ccextractorapi.parse_SDT(ctx)
parse_SDT = _ccextractorapi.parse_SDT

def myth_loop(ctx):
    return _ccextractorapi.myth_loop(ctx)
myth_loop = _ccextractorapi.myth_loop

def matroska_loop(ctx):
    return _ccextractorapi.matroska_loop(ctx)
matroska_loop = _ccextractorapi.matroska_loop

def fatal(exit_code, fmt):
    return _ccextractorapi.fatal(exit_code, fmt)
fatal = _ccextractorapi.fatal

def mprint(fmt):
    return _ccextractorapi.mprint(fmt)
mprint = _ccextractorapi.mprint

def sleep_secs(secs):
    return _ccextractorapi.sleep_secs(secs)
sleep_secs = _ccextractorapi.sleep_secs

def dump(mask, start, l, abs_start, clear_high_bit):
    return _ccextractorapi.dump(mask, start, l, abs_start, clear_high_bit)
dump = _ccextractorapi.dump

def in_array(array, length, element):
    return _ccextractorapi.in_array(array, length, element)
in_array = _ccextractorapi.in_array

def hex_to_int(high, low):
    return _ccextractorapi.hex_to_int(high, low)
hex_to_int = _ccextractorapi.hex_to_int

def hex_string_to_int(string, len):
    return _ccextractorapi.hex_string_to_int(string, len)
hex_string_to_int = _ccextractorapi.hex_string_to_int

def timestamp_to_srttime(timestamp, buffer):
    return _ccextractorapi.timestamp_to_srttime(timestamp, buffer)
timestamp_to_srttime = _ccextractorapi.timestamp_to_srttime

def levenshtein_dist(s1, s2, s1len, s2len):
    return _ccextractorapi.levenshtein_dist(s1, s2, s1len, s2len)
levenshtein_dist = _ccextractorapi.levenshtein_dist

def millis_to_date(timestamp, buffer, date_format, millis_separator):
    return _ccextractorapi.millis_to_date(timestamp, buffer, date_format, millis_separator)
millis_to_date = _ccextractorapi.millis_to_date

def signal_handler(sig_type):
    return _ccextractorapi.signal_handler(sig_type)
signal_handler = _ccextractorapi.signal_handler

def change_filename(arg1):
    return _ccextractorapi.change_filename(arg1)
change_filename = _ccextractorapi.change_filename

def m_signal(sig, func):
    return _ccextractorapi.m_signal(sig, func)
m_signal = _ccextractorapi.m_signal

def buffered_seek(ctx, offset):
    return _ccextractorapi.buffered_seek(ctx, offset)
buffered_seek = _ccextractorapi.buffered_seek

def build_parity_table():
    return _ccextractorapi.build_parity_table()
build_parity_table = _ccextractorapi.build_parity_table

def tlt_process_pes_packet(dec_ctx, buffer, size, sub, sentence_cap):
    return _ccextractorapi.tlt_process_pes_packet(dec_ctx, buffer, size, sub, sentence_cap)
tlt_process_pes_packet = _ccextractorapi.tlt_process_pes_packet

def telxcc_init():
    return _ccextractorapi.telxcc_init()
telxcc_init = _ccextractorapi.telxcc_init

def telxcc_close(ctx, sub):
    return _ccextractorapi.telxcc_close(ctx, sub)
telxcc_close = _ccextractorapi.telxcc_close

def tlt_read_rcwt(codec, buf, sub):
    return _ccextractorapi.tlt_read_rcwt(codec, buf, sub)
tlt_read_rcwt = _ccextractorapi.tlt_read_rcwt

def telxcc_configure(codec, cfg):
    return _ccextractorapi.telxcc_configure(codec, cfg)
telxcc_configure = _ccextractorapi.telxcc_configure

def telxcc_update_gt(codec, global_timestamp):
    return _ccextractorapi.telxcc_update_gt(codec, global_timestamp)
telxcc_update_gt = _ccextractorapi.telxcc_update_gt
HAUPPAGE_CCPID = _ccextractorapi.HAUPPAGE_CCPID
MAX_TLT_PAGES = _ccextractorapi.MAX_TLT_PAGES

def is_decoder_processed_enough(ctx):
    return _ccextractorapi.is_decoder_processed_enough(ctx)
is_decoder_processed_enough = _ccextractorapi.is_decoder_processed_enough

def update_decoder_list_cinfo(ctx, cinfo):
    return _ccextractorapi.update_decoder_list_cinfo(ctx, cinfo)
update_decoder_list_cinfo = _ccextractorapi.update_decoder_list_cinfo

def update_decoder_list(ctx):
    return _ccextractorapi.update_decoder_list(ctx)
update_decoder_list = _ccextractorapi.update_decoder_list

def update_encoder_list_cinfo(ctx, cinfo):
    return _ccextractorapi.update_encoder_list_cinfo(ctx, cinfo)
update_encoder_list_cinfo = _ccextractorapi.update_encoder_list_cinfo

def update_encoder_list(ctx):
    return _ccextractorapi.update_encoder_list(ctx)
update_encoder_list = _ccextractorapi.update_encoder_list

def get_encoder_by_pn(ctx, pn):
    return _ccextractorapi.get_encoder_by_pn(ctx, pn)
get_encoder_by_pn = _ccextractorapi.get_encoder_by_pn

def parse_configuration(opt):
    return _ccextractorapi.parse_configuration(opt)
parse_configuration = _ccextractorapi.parse_configuration
class demuxer_cfg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, demuxer_cfg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, demuxer_cfg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["m2ts"] = _ccextractorapi.demuxer_cfg_m2ts_set
    __swig_getmethods__["m2ts"] = _ccextractorapi.demuxer_cfg_m2ts_get
    if _newclass:
        m2ts = _swig_property(_ccextractorapi.demuxer_cfg_m2ts_get, _ccextractorapi.demuxer_cfg_m2ts_set)
    __swig_setmethods__["auto_stream"] = _ccextractorapi.demuxer_cfg_auto_stream_set
    __swig_getmethods__["auto_stream"] = _ccextractorapi.demuxer_cfg_auto_stream_get
    if _newclass:
        auto_stream = _swig_property(_ccextractorapi.demuxer_cfg_auto_stream_get, _ccextractorapi.demuxer_cfg_auto_stream_set)
    __swig_setmethods__["out_elementarystream_filename"] = _ccextractorapi.demuxer_cfg_out_elementarystream_filename_set
    __swig_getmethods__["out_elementarystream_filename"] = _ccextractorapi.demuxer_cfg_out_elementarystream_filename_get
    if _newclass:
        out_elementarystream_filename = _swig_property(_ccextractorapi.demuxer_cfg_out_elementarystream_filename_get, _ccextractorapi.demuxer_cfg_out_elementarystream_filename_set)
    __swig_setmethods__["codec"] = _ccextractorapi.demuxer_cfg_codec_set
    __swig_getmethods__["codec"] = _ccextractorapi.demuxer_cfg_codec_get
    if _newclass:
        codec = _swig_property(_ccextractorapi.demuxer_cfg_codec_get, _ccextractorapi.demuxer_cfg_codec_set)
    __swig_setmethods__["nocodec"] = _ccextractorapi.demuxer_cfg_nocodec_set
    __swig_getmethods__["nocodec"] = _ccextractorapi.demuxer_cfg_nocodec_get
    if _newclass:
        nocodec = _swig_property(_ccextractorapi.demuxer_cfg_nocodec_get, _ccextractorapi.demuxer_cfg_nocodec_set)
    __swig_setmethods__["ts_autoprogram"] = _ccextractorapi.demuxer_cfg_ts_autoprogram_set
    __swig_getmethods__["ts_autoprogram"] = _ccextractorapi.demuxer_cfg_ts_autoprogram_get
    if _newclass:
        ts_autoprogram = _swig_property(_ccextractorapi.demuxer_cfg_ts_autoprogram_get, _ccextractorapi.demuxer_cfg_ts_autoprogram_set)
    __swig_setmethods__["ts_allprogram"] = _ccextractorapi.demuxer_cfg_ts_allprogram_set
    __swig_getmethods__["ts_allprogram"] = _ccextractorapi.demuxer_cfg_ts_allprogram_get
    if _newclass:
        ts_allprogram = _swig_property(_ccextractorapi.demuxer_cfg_ts_allprogram_get, _ccextractorapi.demuxer_cfg_ts_allprogram_set)
    __swig_setmethods__["ts_cappids"] = _ccextractorapi.demuxer_cfg_ts_cappids_set
    __swig_getmethods__["ts_cappids"] = _ccextractorapi.demuxer_cfg_ts_cappids_get
    if _newclass:
        ts_cappids = _swig_property(_ccextractorapi.demuxer_cfg_ts_cappids_get, _ccextractorapi.demuxer_cfg_ts_cappids_set)
    __swig_setmethods__["nb_ts_cappid"] = _ccextractorapi.demuxer_cfg_nb_ts_cappid_set
    __swig_getmethods__["nb_ts_cappid"] = _ccextractorapi.demuxer_cfg_nb_ts_cappid_get
    if _newclass:
        nb_ts_cappid = _swig_property(_ccextractorapi.demuxer_cfg_nb_ts_cappid_get, _ccextractorapi.demuxer_cfg_nb_ts_cappid_set)
    __swig_setmethods__["ts_forced_cappid"] = _ccextractorapi.demuxer_cfg_ts_forced_cappid_set
    __swig_getmethods__["ts_forced_cappid"] = _ccextractorapi.demuxer_cfg_ts_forced_cappid_get
    if _newclass:
        ts_forced_cappid = _swig_property(_ccextractorapi.demuxer_cfg_ts_forced_cappid_get, _ccextractorapi.demuxer_cfg_ts_forced_cappid_set)
    __swig_setmethods__["ts_forced_program"] = _ccextractorapi.demuxer_cfg_ts_forced_program_set
    __swig_getmethods__["ts_forced_program"] = _ccextractorapi.demuxer_cfg_ts_forced_program_get
    if _newclass:
        ts_forced_program = _swig_property(_ccextractorapi.demuxer_cfg_ts_forced_program_get, _ccextractorapi.demuxer_cfg_ts_forced_program_set)
    __swig_setmethods__["ts_forced_program_selected"] = _ccextractorapi.demuxer_cfg_ts_forced_program_selected_set
    __swig_getmethods__["ts_forced_program_selected"] = _ccextractorapi.demuxer_cfg_ts_forced_program_selected_get
    if _newclass:
        ts_forced_program_selected = _swig_property(_ccextractorapi.demuxer_cfg_ts_forced_program_selected_get, _ccextractorapi.demuxer_cfg_ts_forced_program_selected_set)
    __swig_setmethods__["ts_datastreamtype"] = _ccextractorapi.demuxer_cfg_ts_datastreamtype_set
    __swig_getmethods__["ts_datastreamtype"] = _ccextractorapi.demuxer_cfg_ts_datastreamtype_get
    if _newclass:
        ts_datastreamtype = _swig_property(_ccextractorapi.demuxer_cfg_ts_datastreamtype_get, _ccextractorapi.demuxer_cfg_ts_datastreamtype_set)
    __swig_setmethods__["ts_forced_streamtype"] = _ccextractorapi.demuxer_cfg_ts_forced_streamtype_set
    __swig_getmethods__["ts_forced_streamtype"] = _ccextractorapi.demuxer_cfg_ts_forced_streamtype_get
    if _newclass:
        ts_forced_streamtype = _swig_property(_ccextractorapi.demuxer_cfg_ts_forced_streamtype_get, _ccextractorapi.demuxer_cfg_ts_forced_streamtype_set)

    def __init__(self):
        this = _ccextractorapi.new_demuxer_cfg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ccextractorapi.delete_demuxer_cfg
    __del__ = lambda self: None
demuxer_cfg_swigregister = _ccextractorapi.demuxer_cfg_swigregister
demuxer_cfg_swigregister(demuxer_cfg)
cvar = _ccextractorapi.cvar

class encoder_cfg(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, encoder_cfg, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, encoder_cfg, name)
    __repr__ = _swig_repr
    __swig_setmethods__["extract"] = _ccextractorapi.encoder_cfg_extract_set
    __swig_getmethods__["extract"] = _ccextractorapi.encoder_cfg_extract_get
    if _newclass:
        extract = _swig_property(_ccextractorapi.encoder_cfg_extract_get, _ccextractorapi.encoder_cfg_extract_set)
    __swig_setmethods__["dtvcc_extract"] = _ccextractorapi.encoder_cfg_dtvcc_extract_set
    __swig_getmethods__["dtvcc_extract"] = _ccextractorapi.encoder_cfg_dtvcc_extract_get
    if _newclass:
        dtvcc_extract = _swig_property(_ccextractorapi.encoder_cfg_dtvcc_extract_get, _ccextractorapi.encoder_cfg_dtvcc_extract_set)
    __swig_setmethods__["gui_mode_reports"] = _ccextractorapi.encoder_cfg_gui_mode_reports_set
    __swig_getmethods__["gui_mode_reports"] = _ccextractorapi.encoder_cfg_gui_mode_reports_get
    if _newclass:
        gui_mode_reports = _swig_property(_ccextractorapi.encoder_cfg_gui_mode_reports_get, _ccextractorapi.encoder_cfg_gui_mode_reports_set)
    __swig_setmethods__["output_filename"] = _ccextractorapi.encoder_cfg_output_filename_set
    __swig_getmethods__["output_filename"] = _ccextractorapi.encoder_cfg_output_filename_get
    if _newclass:
        output_filename = _swig_property(_ccextractorapi.encoder_cfg_output_filename_get, _ccextractorapi.encoder_cfg_output_filename_set)
    __swig_setmethods__["write_format"] = _ccextractorapi.encoder_cfg_write_format_set
    __swig_getmethods__["write_format"] = _ccextractorapi.encoder_cfg_write_format_get
    if _newclass:
        write_format = _swig_property(_ccextractorapi.encoder_cfg_write_format_get, _ccextractorapi.encoder_cfg_write_format_set)
    __swig_setmethods__["keep_output_closed"] = _ccextractorapi.encoder_cfg_keep_output_closed_set
    __swig_getmethods__["keep_output_closed"] = _ccextractorapi.encoder_cfg_keep_output_closed_get
    if _newclass:
        keep_output_closed = _swig_property(_ccextractorapi.encoder_cfg_keep_output_closed_get, _ccextractorapi.encoder_cfg_keep_output_closed_set)
    __swig_setmethods__["force_flush"] = _ccextractorapi.encoder_cfg_force_flush_set
    __swig_getmethods__["force_flush"] = _ccextractorapi.encoder_cfg_force_flush_get
    if _newclass:
        force_flush = _swig_property(_ccextractorapi.encoder_cfg_force_flush_get, _ccextractorapi.encoder_cfg_force_flush_set)
    __swig_setmethods__["append_mode"] = _ccextractorapi.encoder_cfg_append_mode_set
    __swig_getmethods__["append_mode"] = _ccextractorapi.encoder_cfg_append_mode_get
    if _newclass:
        append_mode = _swig_property(_ccextractorapi.encoder_cfg_append_mode_get, _ccextractorapi.encoder_cfg_append_mode_set)
    __swig_setmethods__["ucla"] = _ccextractorapi.encoder_cfg_ucla_set
    __swig_getmethods__["ucla"] = _ccextractorapi.encoder_cfg_ucla_get
    if _newclass:
        ucla = _swig_property(_ccextractorapi.encoder_cfg_ucla_get, _ccextractorapi.encoder_cfg_ucla_set)
    __swig_setmethods__["encoding"] = _ccextractorapi.encoder_cfg_encoding_set
    __swig_getmethods__["encoding"] = _ccextractorapi.encoder_cfg_encoding_get
    if _newclass:
        encoding = _swig_property(_ccextractorapi.encoder_cfg_encoding_get, _ccextractorapi.encoder_cfg_encoding_set)
    __swig_setmethods__["date_format"] = _ccextractorapi.encoder_cfg_date_format_set
    __swig_getmethods__["date_format"] = _ccextractorapi.encoder_cfg_date_format_get
    if _newclass:
        date_format = _swig_property(_ccextractorapi.encoder_cfg_date_format_get, _ccextractorapi.encoder_cfg_date_format_set)
    __swig_setmethods__["millis_separator"] = _ccextractorapi.encoder_cfg_millis_separator_set
    __swig_getmethods__["millis_separator"] = _ccextractorapi.encoder_cfg_millis_separator_get
    if _newclass:
        millis_separator = _swig_property(_ccextractorapi.encoder_cfg_millis_separator_get, _ccextractorapi.encoder_cfg_millis_separator_set)
    __swig_setmethods__["autodash"] = _ccextractorapi.encoder_cfg_autodash_set
    __swig_getmethods__["autodash"] = _ccextractorapi.encoder_cfg_autodash_get
    if _newclass:
        autodash = _swig_property(_ccextractorapi.encoder_cfg_autodash_get, _ccextractorapi.encoder_cfg_autodash_set)
    __swig_setmethods__["trim_subs"] = _ccextractorapi.encoder_cfg_trim_subs_set
    __swig_getmethods__["trim_subs"] = _ccextractorapi.encoder_cfg_trim_subs_get
    if _newclass:
        trim_subs = _swig_property(_ccextractorapi.encoder_cfg_trim_subs_get, _ccextractorapi.encoder_cfg_trim_subs_set)
    __swig_setmethods__["sentence_cap"] = _ccextractorapi.encoder_cfg_sentence_cap_set
    __swig_getmethods__["sentence_cap"] = _ccextractorapi.encoder_cfg_sentence_cap_get
    if _newclass:
        sentence_cap = _swig_property(_ccextractorapi.encoder_cfg_sentence_cap_get, _ccextractorapi.encoder_cfg_sentence_cap_set)
    __swig_setmethods__["splitbysentence"] = _ccextractorapi.encoder_cfg_splitbysentence_set
    __swig_getmethods__["splitbysentence"] = _ccextractorapi.encoder_cfg_splitbysentence_get
    if _newclass:
        splitbysentence = _swig_property(_ccextractorapi.encoder_cfg_splitbysentence_get, _ccextractorapi.encoder_cfg_splitbysentence_set)
    __swig_setmethods__["with_semaphore"] = _ccextractorapi.encoder_cfg_with_semaphore_set
    __swig_getmethods__["with_semaphore"] = _ccextractorapi.encoder_cfg_with_semaphore_get
    if _newclass:
        with_semaphore = _swig_property(_ccextractorapi.encoder_cfg_with_semaphore_get, _ccextractorapi.encoder_cfg_with_semaphore_set)
    __swig_setmethods__["start_credits_text"] = _ccextractorapi.encoder_cfg_start_credits_text_set
    __swig_getmethods__["start_credits_text"] = _ccextractorapi.encoder_cfg_start_credits_text_get
    if _newclass:
        start_credits_text = _swig_property(_ccextractorapi.encoder_cfg_start_credits_text_get, _ccextractorapi.encoder_cfg_start_credits_text_set)
    __swig_setmethods__["end_credits_text"] = _ccextractorapi.encoder_cfg_end_credits_text_set
    __swig_getmethods__["end_credits_text"] = _ccextractorapi.encoder_cfg_end_credits_text_get
    if _newclass:
        end_credits_text = _swig_property(_ccextractorapi.encoder_cfg_end_credits_text_get, _ccextractorapi.encoder_cfg_end_credits_text_set)
    __swig_setmethods__["startcreditsnotbefore"] = _ccextractorapi.encoder_cfg_startcreditsnotbefore_set
    __swig_getmethods__["startcreditsnotbefore"] = _ccextractorapi.encoder_cfg_startcreditsnotbefore_get
    if _newclass:
        startcreditsnotbefore = _swig_property(_ccextractorapi.encoder_cfg_startcreditsnotbefore_get, _ccextractorapi.encoder_cfg_startcreditsnotbefore_set)
    __swig_setmethods__["startcreditsnotafter"] = _ccextractorapi.encoder_cfg_startcreditsnotafter_set
    __swig_getmethods__["startcreditsnotafter"] = _ccextractorapi.encoder_cfg_startcreditsnotafter_get
    if _newclass:
        startcreditsnotafter = _swig_property(_ccextractorapi.encoder_cfg_startcreditsnotafter_get, _ccextractorapi.encoder_cfg_startcreditsnotafter_set)
    __swig_setmethods__["startcreditsforatleast"] = _ccextractorapi.encoder_cfg_startcreditsforatleast_set
    __swig_getmethods__["startcreditsforatleast"] = _ccextractorapi.encoder_cfg_startcreditsforatleast_get
    if _newclass:
        startcreditsforatleast = _swig_property(_ccextractorapi.encoder_cfg_startcreditsforatleast_get, _ccextractorapi.encoder_cfg_startcreditsforatleast_set)
    __swig_setmethods__["startcreditsforatmost"] = _ccextractorapi.encoder_cfg_startcreditsforatmost_set
    __swig_getmethods__["startcreditsforatmost"] = _ccextractorapi.encoder_cfg_startcreditsforatmost_get
    if _newclass:
        startcreditsforatmost = _swig_property(_ccextractorapi.encoder_cfg_startcreditsforatmost_get, _ccextractorapi.encoder_cfg_startcreditsforatmost_set)
    __swig_setmethods__["endcreditsforatleast"] = _ccextractorapi.encoder_cfg_endcreditsforatleast_set
    __swig_getmethods__["endcreditsforatleast"] = _ccextractorapi.encoder_cfg_endcreditsforatleast_get
    if _newclass:
        endcreditsforatleast = _swig_property(_ccextractorapi.encoder_cfg_endcreditsforatleast_get, _ccextractorapi.encoder_cfg_endcreditsforatleast_set)
    __swig_setmethods__["endcreditsforatmost"] = _ccextractorapi.encoder_cfg_endcreditsforatmost_set
    __swig_getmethods__["endcreditsforatmost"] = _ccextractorapi.encoder_cfg_endcreditsforatmost_get
    if _newclass:
        endcreditsforatmost = _swig_property(_ccextractorapi.encoder_cfg_endcreditsforatmost_get, _ccextractorapi.encoder_cfg_endcreditsforatmost_set)
    __swig_setmethods__["transcript_settings"] = _ccextractorapi.encoder_cfg_transcript_settings_set
    __swig_getmethods__["transcript_settings"] = _ccextractorapi.encoder_cfg_transcript_settings_get
    if _newclass:
        transcript_settings = _swig_property(_ccextractorapi.encoder_cfg_transcript_settings_get, _ccextractorapi.encoder_cfg_transcript_settings_set)
    __swig_setmethods__["send_to_srv"] = _ccextractorapi.encoder_cfg_send_to_srv_set
    __swig_getmethods__["send_to_srv"] = _ccextractorapi.encoder_cfg_send_to_srv_get
    if _newclass:
        send_to_srv = _swig_property(_ccextractorapi.encoder_cfg_send_to_srv_get, _ccextractorapi.encoder_cfg_send_to_srv_set)
    __swig_setmethods__["no_bom"] = _ccextractorapi.encoder_cfg_no_bom_set
    __swig_getmethods__["no_bom"] = _ccextractorapi.encoder_cfg_no_bom_get
    if _newclass:
        no_bom = _swig_property(_ccextractorapi.encoder_cfg_no_bom_get, _ccextractorapi.encoder_cfg_no_bom_set)
    __swig_setmethods__["first_input_file"] = _ccextractorapi.encoder_cfg_first_input_file_set
    __swig_getmethods__["first_input_file"] = _ccextractorapi.encoder_cfg_first_input_file_get
    if _newclass:
        first_input_file = _swig_property(_ccextractorapi.encoder_cfg_first_input_file_get, _ccextractorapi.encoder_cfg_first_input_file_set)
    __swig_setmethods__["multiple_files"] = _ccextractorapi.encoder_cfg_multiple_files_set
    __swig_getmethods__["multiple_files"] = _ccextractorapi.encoder_cfg_multiple_files_get
    if _newclass:
        multiple_files = _swig_property(_ccextractorapi.encoder_cfg_multiple_files_get, _ccextractorapi.encoder_cfg_multiple_files_set)
    __swig_setmethods__["no_font_color"] = _ccextractorapi.encoder_cfg_no_font_color_set
    __swig_getmethods__["no_font_color"] = _ccextractorapi.encoder_cfg_no_font_color_get
    if _newclass:
        no_font_color = _swig_property(_ccextractorapi.encoder_cfg_no_font_color_get, _ccextractorapi.encoder_cfg_no_font_color_set)
    __swig_setmethods__["no_type_setting"] = _ccextractorapi.encoder_cfg_no_type_setting_set
    __swig_getmethods__["no_type_setting"] = _ccextractorapi.encoder_cfg_no_type_setting_get
    if _newclass:
        no_type_setting = _swig_property(_ccextractorapi.encoder_cfg_no_type_setting_get, _ccextractorapi.encoder_cfg_no_type_setting_set)
    __swig_setmethods__["cc_to_stdout"] = _ccextractorapi.encoder_cfg_cc_to_stdout_set
    __swig_getmethods__["cc_to_stdout"] = _ccextractorapi.encoder_cfg_cc_to_stdout_get
    if _newclass:
        cc_to_stdout = _swig_property(_ccextractorapi.encoder_cfg_cc_to_stdout_get, _ccextractorapi.encoder_cfg_cc_to_stdout_set)
    __swig_setmethods__["line_terminator_lf"] = _ccextractorapi.encoder_cfg_line_terminator_lf_set
    __swig_getmethods__["line_terminator_lf"] = _ccextractorapi.encoder_cfg_line_terminator_lf_get
    if _newclass:
        line_terminator_lf = _swig_property(_ccextractorapi.encoder_cfg_line_terminator_lf_get, _ccextractorapi.encoder_cfg_line_terminator_lf_set)
    __swig_setmethods__["subs_delay"] = _ccextractorapi.encoder_cfg_subs_delay_set
    __swig_getmethods__["subs_delay"] = _ccextractorapi.encoder_cfg_subs_delay_get
    if _newclass:
        subs_delay = _swig_property(_ccextractorapi.encoder_cfg_subs_delay_get, _ccextractorapi.encoder_cfg_subs_delay_set)
    __swig_setmethods__["program_number"] = _ccextractorapi.encoder_cfg_program_number_set
    __swig_getmethods__["program_number"] = _ccextractorapi.encoder_cfg_program_number_get
    if _newclass:
        program_number = _swig_property(_ccextractorapi.encoder_cfg_program_number_get, _ccextractorapi.encoder_cfg_program_number_set)
    __swig_setmethods__["in_format"] = _ccextractorapi.encoder_cfg_in_format_set
    __swig_getmethods__["in_format"] = _ccextractorapi.encoder_cfg_in_format_get
    if _newclass:
        in_format = _swig_property(_ccextractorapi.encoder_cfg_in_format_get, _ccextractorapi.encoder_cfg_in_format_set)
    __swig_setmethods__["services_enabled"] = _ccextractorapi.encoder_cfg_services_enabled_set
    __swig_getmethods__["services_enabled"] = _ccextractorapi.encoder_cfg_services_enabled_get
    if _newclass:
        services_enabled = _swig_property(_ccextractorapi.encoder_cfg_services_enabled_get, _ccextractorapi.encoder_cfg_services_enabled_set)
    __swig_setmethods__["services_charsets"] = _ccextractorapi.encoder_cfg_services_charsets_set
    __swig_getmethods__["services_charsets"] = _ccextractorapi.encoder_cfg_services_charsets_get
    if _newclass:
        services_charsets = _swig_property(_ccextractorapi.encoder_cfg_services_charsets_get, _ccextractorapi.encoder_cfg_services_charsets_set)
    __swig_setmethods__["all_services_charset"] = _ccextractorapi.encoder_cfg_all_services_charset_set
    __swig_getmethods__["all_services_charset"] = _ccextractorapi.encoder_cfg_all_services_charset_get
    if _newclass:
        all_services_charset = _swig_property(_ccextractorapi.encoder_cfg_all_services_charset_get, _ccextractorapi.encoder_cfg_all_services_charset_set)

    def __init__(self):
        this = _ccextractorapi.new_encoder_cfg()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ccextractorapi.delete_encoder_cfg
    __del__ = lambda self: None
encoder_cfg_swigregister = _ccextractorapi.encoder_cfg_swigregister
encoder_cfg_swigregister(encoder_cfg)

class ccx_s_options(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ccx_s_options, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ccx_s_options, name)
    __repr__ = _swig_repr
    __swig_setmethods__["extract"] = _ccextractorapi.ccx_s_options_extract_set
    __swig_getmethods__["extract"] = _ccextractorapi.ccx_s_options_extract_get
    if _newclass:
        extract = _swig_property(_ccextractorapi.ccx_s_options_extract_get, _ccextractorapi.ccx_s_options_extract_set)
    __swig_setmethods__["no_rollup"] = _ccextractorapi.ccx_s_options_no_rollup_set
    __swig_getmethods__["no_rollup"] = _ccextractorapi.ccx_s_options_no_rollup_get
    if _newclass:
        no_rollup = _swig_property(_ccextractorapi.ccx_s_options_no_rollup_get, _ccextractorapi.ccx_s_options_no_rollup_set)
    __swig_setmethods__["noscte20"] = _ccextractorapi.ccx_s_options_noscte20_set
    __swig_getmethods__["noscte20"] = _ccextractorapi.ccx_s_options_noscte20_get
    if _newclass:
        noscte20 = _swig_property(_ccextractorapi.ccx_s_options_noscte20_get, _ccextractorapi.ccx_s_options_noscte20_set)
    __swig_setmethods__["webvtt_create_css"] = _ccextractorapi.ccx_s_options_webvtt_create_css_set
    __swig_getmethods__["webvtt_create_css"] = _ccextractorapi.ccx_s_options_webvtt_create_css_get
    if _newclass:
        webvtt_create_css = _swig_property(_ccextractorapi.ccx_s_options_webvtt_create_css_get, _ccextractorapi.ccx_s_options_webvtt_create_css_set)
    __swig_setmethods__["cc_channel"] = _ccextractorapi.ccx_s_options_cc_channel_set
    __swig_getmethods__["cc_channel"] = _ccextractorapi.ccx_s_options_cc_channel_get
    if _newclass:
        cc_channel = _swig_property(_ccextractorapi.ccx_s_options_cc_channel_get, _ccextractorapi.ccx_s_options_cc_channel_set)
    __swig_setmethods__["buffer_input"] = _ccextractorapi.ccx_s_options_buffer_input_set
    __swig_getmethods__["buffer_input"] = _ccextractorapi.ccx_s_options_buffer_input_get
    if _newclass:
        buffer_input = _swig_property(_ccextractorapi.ccx_s_options_buffer_input_get, _ccextractorapi.ccx_s_options_buffer_input_set)
    __swig_setmethods__["nofontcolor"] = _ccextractorapi.ccx_s_options_nofontcolor_set
    __swig_getmethods__["nofontcolor"] = _ccextractorapi.ccx_s_options_nofontcolor_get
    if _newclass:
        nofontcolor = _swig_property(_ccextractorapi.ccx_s_options_nofontcolor_get, _ccextractorapi.ccx_s_options_nofontcolor_set)
    __swig_setmethods__["nohtmlescape"] = _ccextractorapi.ccx_s_options_nohtmlescape_set
    __swig_getmethods__["nohtmlescape"] = _ccextractorapi.ccx_s_options_nohtmlescape_get
    if _newclass:
        nohtmlescape = _swig_property(_ccextractorapi.ccx_s_options_nohtmlescape_get, _ccextractorapi.ccx_s_options_nohtmlescape_set)
    __swig_setmethods__["notypesetting"] = _ccextractorapi.ccx_s_options_notypesetting_set
    __swig_getmethods__["notypesetting"] = _ccextractorapi.ccx_s_options_notypesetting_get
    if _newclass:
        notypesetting = _swig_property(_ccextractorapi.ccx_s_options_notypesetting_get, _ccextractorapi.ccx_s_options_notypesetting_set)
    __swig_setmethods__["extraction_start"] = _ccextractorapi.ccx_s_options_extraction_start_set
    __swig_getmethods__["extraction_start"] = _ccextractorapi.ccx_s_options_extraction_start_get
    if _newclass:
        extraction_start = _swig_property(_ccextractorapi.ccx_s_options_extraction_start_get, _ccextractorapi.ccx_s_options_extraction_start_set)
    __swig_setmethods__["extraction_end"] = _ccextractorapi.ccx_s_options_extraction_end_set
    __swig_getmethods__["extraction_end"] = _ccextractorapi.ccx_s_options_extraction_end_get
    if _newclass:
        extraction_end = _swig_property(_ccextractorapi.ccx_s_options_extraction_end_get, _ccextractorapi.ccx_s_options_extraction_end_set)
    __swig_setmethods__["print_file_reports"] = _ccextractorapi.ccx_s_options_print_file_reports_set
    __swig_getmethods__["print_file_reports"] = _ccextractorapi.ccx_s_options_print_file_reports_get
    if _newclass:
        print_file_reports = _swig_property(_ccextractorapi.ccx_s_options_print_file_reports_get, _ccextractorapi.ccx_s_options_print_file_reports_set)
    __swig_setmethods__["settings_608"] = _ccextractorapi.ccx_s_options_settings_608_set
    __swig_getmethods__["settings_608"] = _ccextractorapi.ccx_s_options_settings_608_get
    if _newclass:
        settings_608 = _swig_property(_ccextractorapi.ccx_s_options_settings_608_get, _ccextractorapi.ccx_s_options_settings_608_set)
    __swig_setmethods__["settings_dtvcc"] = _ccextractorapi.ccx_s_options_settings_dtvcc_set
    __swig_getmethods__["settings_dtvcc"] = _ccextractorapi.ccx_s_options_settings_dtvcc_get
    if _newclass:
        settings_dtvcc = _swig_property(_ccextractorapi.ccx_s_options_settings_dtvcc_get, _ccextractorapi.ccx_s_options_settings_dtvcc_set)
    __swig_setmethods__["millis_separator"] = _ccextractorapi.ccx_s_options_millis_separator_set
    __swig_getmethods__["millis_separator"] = _ccextractorapi.ccx_s_options_millis_separator_get
    if _newclass:
        millis_separator = _swig_property(_ccextractorapi.ccx_s_options_millis_separator_get, _ccextractorapi.ccx_s_options_millis_separator_set)
    __swig_setmethods__["binary_concat"] = _ccextractorapi.ccx_s_options_binary_concat_set
    __swig_getmethods__["binary_concat"] = _ccextractorapi.ccx_s_options_binary_concat_get
    if _newclass:
        binary_concat = _swig_property(_ccextractorapi.ccx_s_options_binary_concat_get, _ccextractorapi.ccx_s_options_binary_concat_set)
    __swig_setmethods__["use_gop_as_pts"] = _ccextractorapi.ccx_s_options_use_gop_as_pts_set
    __swig_getmethods__["use_gop_as_pts"] = _ccextractorapi.ccx_s_options_use_gop_as_pts_get
    if _newclass:
        use_gop_as_pts = _swig_property(_ccextractorapi.ccx_s_options_use_gop_as_pts_get, _ccextractorapi.ccx_s_options_use_gop_as_pts_set)
    __swig_setmethods__["fix_padding"] = _ccextractorapi.ccx_s_options_fix_padding_set
    __swig_getmethods__["fix_padding"] = _ccextractorapi.ccx_s_options_fix_padding_get
    if _newclass:
        fix_padding = _swig_property(_ccextractorapi.ccx_s_options_fix_padding_get, _ccextractorapi.ccx_s_options_fix_padding_set)
    __swig_setmethods__["gui_mode_reports"] = _ccextractorapi.ccx_s_options_gui_mode_reports_set
    __swig_getmethods__["gui_mode_reports"] = _ccextractorapi.ccx_s_options_gui_mode_reports_get
    if _newclass:
        gui_mode_reports = _swig_property(_ccextractorapi.ccx_s_options_gui_mode_reports_get, _ccextractorapi.ccx_s_options_gui_mode_reports_set)
    __swig_setmethods__["no_progress_bar"] = _ccextractorapi.ccx_s_options_no_progress_bar_set
    __swig_getmethods__["no_progress_bar"] = _ccextractorapi.ccx_s_options_no_progress_bar_get
    if _newclass:
        no_progress_bar = _swig_property(_ccextractorapi.ccx_s_options_no_progress_bar_get, _ccextractorapi.ccx_s_options_no_progress_bar_set)
    __swig_setmethods__["sentence_cap_file"] = _ccextractorapi.ccx_s_options_sentence_cap_file_set
    __swig_getmethods__["sentence_cap_file"] = _ccextractorapi.ccx_s_options_sentence_cap_file_get
    if _newclass:
        sentence_cap_file = _swig_property(_ccextractorapi.ccx_s_options_sentence_cap_file_get, _ccextractorapi.ccx_s_options_sentence_cap_file_set)
    __swig_setmethods__["live_stream"] = _ccextractorapi.ccx_s_options_live_stream_set
    __swig_getmethods__["live_stream"] = _ccextractorapi.ccx_s_options_live_stream_get
    if _newclass:
        live_stream = _swig_property(_ccextractorapi.ccx_s_options_live_stream_get, _ccextractorapi.ccx_s_options_live_stream_set)
    __swig_setmethods__["messages_target"] = _ccextractorapi.ccx_s_options_messages_target_set
    __swig_getmethods__["messages_target"] = _ccextractorapi.ccx_s_options_messages_target_get
    if _newclass:
        messages_target = _swig_property(_ccextractorapi.ccx_s_options_messages_target_get, _ccextractorapi.ccx_s_options_messages_target_set)
    __swig_setmethods__["levdistmincnt"] = _ccextractorapi.ccx_s_options_levdistmincnt_set
    __swig_getmethods__["levdistmincnt"] = _ccextractorapi.ccx_s_options_levdistmincnt_get
    if _newclass:
        levdistmincnt = _swig_property(_ccextractorapi.ccx_s_options_levdistmincnt_get, _ccextractorapi.ccx_s_options_levdistmincnt_set)
    __swig_setmethods__["levdistmaxpct"] = _ccextractorapi.ccx_s_options_levdistmaxpct_set
    __swig_getmethods__["levdistmaxpct"] = _ccextractorapi.ccx_s_options_levdistmaxpct_get
    if _newclass:
        levdistmaxpct = _swig_property(_ccextractorapi.ccx_s_options_levdistmaxpct_get, _ccextractorapi.ccx_s_options_levdistmaxpct_set)
    __swig_setmethods__["investigate_packets"] = _ccextractorapi.ccx_s_options_investigate_packets_set
    __swig_getmethods__["investigate_packets"] = _ccextractorapi.ccx_s_options_investigate_packets_get
    if _newclass:
        investigate_packets = _swig_property(_ccextractorapi.ccx_s_options_investigate_packets_get, _ccextractorapi.ccx_s_options_investigate_packets_set)
    __swig_setmethods__["fullbin"] = _ccextractorapi.ccx_s_options_fullbin_set
    __swig_getmethods__["fullbin"] = _ccextractorapi.ccx_s_options_fullbin_get
    if _newclass:
        fullbin = _swig_property(_ccextractorapi.ccx_s_options_fullbin_get, _ccextractorapi.ccx_s_options_fullbin_set)
    __swig_setmethods__["nosync"] = _ccextractorapi.ccx_s_options_nosync_set
    __swig_getmethods__["nosync"] = _ccextractorapi.ccx_s_options_nosync_get
    if _newclass:
        nosync = _swig_property(_ccextractorapi.ccx_s_options_nosync_get, _ccextractorapi.ccx_s_options_nosync_set)
    __swig_setmethods__["hauppauge_mode"] = _ccextractorapi.ccx_s_options_hauppauge_mode_set
    __swig_getmethods__["hauppauge_mode"] = _ccextractorapi.ccx_s_options_hauppauge_mode_get
    if _newclass:
        hauppauge_mode = _swig_property(_ccextractorapi.ccx_s_options_hauppauge_mode_get, _ccextractorapi.ccx_s_options_hauppauge_mode_set)
    __swig_setmethods__["wtvconvertfix"] = _ccextractorapi.ccx_s_options_wtvconvertfix_set
    __swig_getmethods__["wtvconvertfix"] = _ccextractorapi.ccx_s_options_wtvconvertfix_get
    if _newclass:
        wtvconvertfix = _swig_property(_ccextractorapi.ccx_s_options_wtvconvertfix_get, _ccextractorapi.ccx_s_options_wtvconvertfix_set)
    __swig_setmethods__["wtvmpeg2"] = _ccextractorapi.ccx_s_options_wtvmpeg2_set
    __swig_getmethods__["wtvmpeg2"] = _ccextractorapi.ccx_s_options_wtvmpeg2_get
    if _newclass:
        wtvmpeg2 = _swig_property(_ccextractorapi.ccx_s_options_wtvmpeg2_get, _ccextractorapi.ccx_s_options_wtvmpeg2_set)
    __swig_setmethods__["auto_myth"] = _ccextractorapi.ccx_s_options_auto_myth_set
    __swig_getmethods__["auto_myth"] = _ccextractorapi.ccx_s_options_auto_myth_get
    if _newclass:
        auto_myth = _swig_property(_ccextractorapi.ccx_s_options_auto_myth_get, _ccextractorapi.ccx_s_options_auto_myth_set)
    __swig_setmethods__["mp4vidtrack"] = _ccextractorapi.ccx_s_options_mp4vidtrack_set
    __swig_getmethods__["mp4vidtrack"] = _ccextractorapi.ccx_s_options_mp4vidtrack_get
    if _newclass:
        mp4vidtrack = _swig_property(_ccextractorapi.ccx_s_options_mp4vidtrack_get, _ccextractorapi.ccx_s_options_mp4vidtrack_set)
    __swig_setmethods__["extract_chapters"] = _ccextractorapi.ccx_s_options_extract_chapters_set
    __swig_getmethods__["extract_chapters"] = _ccextractorapi.ccx_s_options_extract_chapters_get
    if _newclass:
        extract_chapters = _swig_property(_ccextractorapi.ccx_s_options_extract_chapters_get, _ccextractorapi.ccx_s_options_extract_chapters_set)
    __swig_setmethods__["usepicorder"] = _ccextractorapi.ccx_s_options_usepicorder_set
    __swig_getmethods__["usepicorder"] = _ccextractorapi.ccx_s_options_usepicorder_get
    if _newclass:
        usepicorder = _swig_property(_ccextractorapi.ccx_s_options_usepicorder_get, _ccextractorapi.ccx_s_options_usepicorder_set)
    __swig_setmethods__["xmltv"] = _ccextractorapi.ccx_s_options_xmltv_set
    __swig_getmethods__["xmltv"] = _ccextractorapi.ccx_s_options_xmltv_get
    if _newclass:
        xmltv = _swig_property(_ccextractorapi.ccx_s_options_xmltv_get, _ccextractorapi.ccx_s_options_xmltv_set)
    __swig_setmethods__["xmltvliveinterval"] = _ccextractorapi.ccx_s_options_xmltvliveinterval_set
    __swig_getmethods__["xmltvliveinterval"] = _ccextractorapi.ccx_s_options_xmltvliveinterval_get
    if _newclass:
        xmltvliveinterval = _swig_property(_ccextractorapi.ccx_s_options_xmltvliveinterval_get, _ccextractorapi.ccx_s_options_xmltvliveinterval_set)
    __swig_setmethods__["xmltvoutputinterval"] = _ccextractorapi.ccx_s_options_xmltvoutputinterval_set
    __swig_getmethods__["xmltvoutputinterval"] = _ccextractorapi.ccx_s_options_xmltvoutputinterval_get
    if _newclass:
        xmltvoutputinterval = _swig_property(_ccextractorapi.ccx_s_options_xmltvoutputinterval_get, _ccextractorapi.ccx_s_options_xmltvoutputinterval_set)
    __swig_setmethods__["xmltvonlycurrent"] = _ccextractorapi.ccx_s_options_xmltvonlycurrent_set
    __swig_getmethods__["xmltvonlycurrent"] = _ccextractorapi.ccx_s_options_xmltvonlycurrent_get
    if _newclass:
        xmltvonlycurrent = _swig_property(_ccextractorapi.ccx_s_options_xmltvonlycurrent_get, _ccextractorapi.ccx_s_options_xmltvonlycurrent_set)
    __swig_setmethods__["keep_output_closed"] = _ccextractorapi.ccx_s_options_keep_output_closed_set
    __swig_getmethods__["keep_output_closed"] = _ccextractorapi.ccx_s_options_keep_output_closed_get
    if _newclass:
        keep_output_closed = _swig_property(_ccextractorapi.ccx_s_options_keep_output_closed_get, _ccextractorapi.ccx_s_options_keep_output_closed_set)
    __swig_setmethods__["force_flush"] = _ccextractorapi.ccx_s_options_force_flush_set
    __swig_getmethods__["force_flush"] = _ccextractorapi.ccx_s_options_force_flush_get
    if _newclass:
        force_flush = _swig_property(_ccextractorapi.ccx_s_options_force_flush_get, _ccextractorapi.ccx_s_options_force_flush_set)
    __swig_setmethods__["append_mode"] = _ccextractorapi.ccx_s_options_append_mode_set
    __swig_getmethods__["append_mode"] = _ccextractorapi.ccx_s_options_append_mode_get
    if _newclass:
        append_mode = _swig_property(_ccextractorapi.ccx_s_options_append_mode_get, _ccextractorapi.ccx_s_options_append_mode_set)
    __swig_setmethods__["ucla"] = _ccextractorapi.ccx_s_options_ucla_set
    __swig_getmethods__["ucla"] = _ccextractorapi.ccx_s_options_ucla_get
    if _newclass:
        ucla = _swig_property(_ccextractorapi.ccx_s_options_ucla_get, _ccextractorapi.ccx_s_options_ucla_set)
    __swig_setmethods__["tickertext"] = _ccextractorapi.ccx_s_options_tickertext_set
    __swig_getmethods__["tickertext"] = _ccextractorapi.ccx_s_options_tickertext_get
    if _newclass:
        tickertext = _swig_property(_ccextractorapi.ccx_s_options_tickertext_get, _ccextractorapi.ccx_s_options_tickertext_set)
    __swig_setmethods__["hardsubx"] = _ccextractorapi.ccx_s_options_hardsubx_set
    __swig_getmethods__["hardsubx"] = _ccextractorapi.ccx_s_options_hardsubx_get
    if _newclass:
        hardsubx = _swig_property(_ccextractorapi.ccx_s_options_hardsubx_get, _ccextractorapi.ccx_s_options_hardsubx_set)
    __swig_setmethods__["dvbcolor"] = _ccextractorapi.ccx_s_options_dvbcolor_set
    __swig_getmethods__["dvbcolor"] = _ccextractorapi.ccx_s_options_dvbcolor_get
    if _newclass:
        dvbcolor = _swig_property(_ccextractorapi.ccx_s_options_dvbcolor_get, _ccextractorapi.ccx_s_options_dvbcolor_set)
    __swig_setmethods__["dvblang"] = _ccextractorapi.ccx_s_options_dvblang_set
    __swig_getmethods__["dvblang"] = _ccextractorapi.ccx_s_options_dvblang_get
    if _newclass:
        dvblang = _swig_property(_ccextractorapi.ccx_s_options_dvblang_get, _ccextractorapi.ccx_s_options_dvblang_set)
    __swig_setmethods__["ocrlang"] = _ccextractorapi.ccx_s_options_ocrlang_set
    __swig_getmethods__["ocrlang"] = _ccextractorapi.ccx_s_options_ocrlang_get
    if _newclass:
        ocrlang = _swig_property(_ccextractorapi.ccx_s_options_ocrlang_get, _ccextractorapi.ccx_s_options_ocrlang_set)
    __swig_setmethods__["ocr_oem"] = _ccextractorapi.ccx_s_options_ocr_oem_set
    __swig_getmethods__["ocr_oem"] = _ccextractorapi.ccx_s_options_ocr_oem_get
    if _newclass:
        ocr_oem = _swig_property(_ccextractorapi.ccx_s_options_ocr_oem_get, _ccextractorapi.ccx_s_options_ocr_oem_set)
    __swig_setmethods__["mkvlang"] = _ccextractorapi.ccx_s_options_mkvlang_set
    __swig_getmethods__["mkvlang"] = _ccextractorapi.ccx_s_options_mkvlang_get
    if _newclass:
        mkvlang = _swig_property(_ccextractorapi.ccx_s_options_mkvlang_get, _ccextractorapi.ccx_s_options_mkvlang_set)
    __swig_setmethods__["hardsubx_ocr_mode"] = _ccextractorapi.ccx_s_options_hardsubx_ocr_mode_set
    __swig_getmethods__["hardsubx_ocr_mode"] = _ccextractorapi.ccx_s_options_hardsubx_ocr_mode_get
    if _newclass:
        hardsubx_ocr_mode = _swig_property(_ccextractorapi.ccx_s_options_hardsubx_ocr_mode_get, _ccextractorapi.ccx_s_options_hardsubx_ocr_mode_set)
    __swig_setmethods__["hardsubx_subcolor"] = _ccextractorapi.ccx_s_options_hardsubx_subcolor_set
    __swig_getmethods__["hardsubx_subcolor"] = _ccextractorapi.ccx_s_options_hardsubx_subcolor_get
    if _newclass:
        hardsubx_subcolor = _swig_property(_ccextractorapi.ccx_s_options_hardsubx_subcolor_get, _ccextractorapi.ccx_s_options_hardsubx_subcolor_set)
    __swig_setmethods__["hardsubx_min_sub_duration"] = _ccextractorapi.ccx_s_options_hardsubx_min_sub_duration_set
    __swig_getmethods__["hardsubx_min_sub_duration"] = _ccextractorapi.ccx_s_options_hardsubx_min_sub_duration_get
    if _newclass:
        hardsubx_min_sub_duration = _swig_property(_ccextractorapi.ccx_s_options_hardsubx_min_sub_duration_get, _ccextractorapi.ccx_s_options_hardsubx_min_sub_duration_set)
    __swig_setmethods__["hardsubx_detect_italics"] = _ccextractorapi.ccx_s_options_hardsubx_detect_italics_set
    __swig_getmethods__["hardsubx_detect_italics"] = _ccextractorapi.ccx_s_options_hardsubx_detect_italics_get
    if _newclass:
        hardsubx_detect_italics = _swig_property(_ccextractorapi.ccx_s_options_hardsubx_detect_italics_get, _ccextractorapi.ccx_s_options_hardsubx_detect_italics_set)
    __swig_setmethods__["hardsubx_conf_thresh"] = _ccextractorapi.ccx_s_options_hardsubx_conf_thresh_set
    __swig_getmethods__["hardsubx_conf_thresh"] = _ccextractorapi.ccx_s_options_hardsubx_conf_thresh_get
    if _newclass:
        hardsubx_conf_thresh = _swig_property(_ccextractorapi.ccx_s_options_hardsubx_conf_thresh_get, _ccextractorapi.ccx_s_options_hardsubx_conf_thresh_set)
    __swig_setmethods__["hardsubx_hue"] = _ccextractorapi.ccx_s_options_hardsubx_hue_set
    __swig_getmethods__["hardsubx_hue"] = _ccextractorapi.ccx_s_options_hardsubx_hue_get
    if _newclass:
        hardsubx_hue = _swig_property(_ccextractorapi.ccx_s_options_hardsubx_hue_get, _ccextractorapi.ccx_s_options_hardsubx_hue_set)
    __swig_setmethods__["hardsubx_lum_thresh"] = _ccextractorapi.ccx_s_options_hardsubx_lum_thresh_set
    __swig_getmethods__["hardsubx_lum_thresh"] = _ccextractorapi.ccx_s_options_hardsubx_lum_thresh_get
    if _newclass:
        hardsubx_lum_thresh = _swig_property(_ccextractorapi.ccx_s_options_hardsubx_lum_thresh_get, _ccextractorapi.ccx_s_options_hardsubx_lum_thresh_set)
    __swig_setmethods__["transcript_settings"] = _ccextractorapi.ccx_s_options_transcript_settings_set
    __swig_getmethods__["transcript_settings"] = _ccextractorapi.ccx_s_options_transcript_settings_get
    if _newclass:
        transcript_settings = _swig_property(_ccextractorapi.ccx_s_options_transcript_settings_get, _ccextractorapi.ccx_s_options_transcript_settings_set)
    __swig_setmethods__["date_format"] = _ccextractorapi.ccx_s_options_date_format_set
    __swig_getmethods__["date_format"] = _ccextractorapi.ccx_s_options_date_format_get
    if _newclass:
        date_format = _swig_property(_ccextractorapi.ccx_s_options_date_format_get, _ccextractorapi.ccx_s_options_date_format_set)
    __swig_setmethods__["send_to_srv"] = _ccextractorapi.ccx_s_options_send_to_srv_set
    __swig_getmethods__["send_to_srv"] = _ccextractorapi.ccx_s_options_send_to_srv_get
    if _newclass:
        send_to_srv = _swig_property(_ccextractorapi.ccx_s_options_send_to_srv_get, _ccextractorapi.ccx_s_options_send_to_srv_set)
    __swig_setmethods__["write_format"] = _ccextractorapi.ccx_s_options_write_format_set
    __swig_getmethods__["write_format"] = _ccextractorapi.ccx_s_options_write_format_get
    if _newclass:
        write_format = _swig_property(_ccextractorapi.ccx_s_options_write_format_get, _ccextractorapi.ccx_s_options_write_format_set)
    __swig_setmethods__["write_format_rewritten"] = _ccextractorapi.ccx_s_options_write_format_rewritten_set
    __swig_getmethods__["write_format_rewritten"] = _ccextractorapi.ccx_s_options_write_format_rewritten_get
    if _newclass:
        write_format_rewritten = _swig_property(_ccextractorapi.ccx_s_options_write_format_rewritten_get, _ccextractorapi.ccx_s_options_write_format_rewritten_set)
    __swig_setmethods__["use_ass_instead_of_ssa"] = _ccextractorapi.ccx_s_options_use_ass_instead_of_ssa_set
    __swig_getmethods__["use_ass_instead_of_ssa"] = _ccextractorapi.ccx_s_options_use_ass_instead_of_ssa_get
    if _newclass:
        use_ass_instead_of_ssa = _swig_property(_ccextractorapi.ccx_s_options_use_ass_instead_of_ssa_get, _ccextractorapi.ccx_s_options_use_ass_instead_of_ssa_set)
    __swig_setmethods__["use_webvtt_styling"] = _ccextractorapi.ccx_s_options_use_webvtt_styling_set
    __swig_getmethods__["use_webvtt_styling"] = _ccextractorapi.ccx_s_options_use_webvtt_styling_get
    if _newclass:
        use_webvtt_styling = _swig_property(_ccextractorapi.ccx_s_options_use_webvtt_styling_get, _ccextractorapi.ccx_s_options_use_webvtt_styling_set)
    __swig_setmethods__["debug_mask"] = _ccextractorapi.ccx_s_options_debug_mask_set
    __swig_getmethods__["debug_mask"] = _ccextractorapi.ccx_s_options_debug_mask_get
    if _newclass:
        debug_mask = _swig_property(_ccextractorapi.ccx_s_options_debug_mask_get, _ccextractorapi.ccx_s_options_debug_mask_set)
    __swig_setmethods__["debug_mask_on_debug"] = _ccextractorapi.ccx_s_options_debug_mask_on_debug_set
    __swig_getmethods__["debug_mask_on_debug"] = _ccextractorapi.ccx_s_options_debug_mask_on_debug_get
    if _newclass:
        debug_mask_on_debug = _swig_property(_ccextractorapi.ccx_s_options_debug_mask_on_debug_get, _ccextractorapi.ccx_s_options_debug_mask_on_debug_set)
    __swig_setmethods__["udpaddr"] = _ccextractorapi.ccx_s_options_udpaddr_set
    __swig_getmethods__["udpaddr"] = _ccextractorapi.ccx_s_options_udpaddr_get
    if _newclass:
        udpaddr = _swig_property(_ccextractorapi.ccx_s_options_udpaddr_get, _ccextractorapi.ccx_s_options_udpaddr_set)
    __swig_setmethods__["udpport"] = _ccextractorapi.ccx_s_options_udpport_set
    __swig_getmethods__["udpport"] = _ccextractorapi.ccx_s_options_udpport_get
    if _newclass:
        udpport = _swig_property(_ccextractorapi.ccx_s_options_udpport_get, _ccextractorapi.ccx_s_options_udpport_set)
    __swig_setmethods__["tcpport"] = _ccextractorapi.ccx_s_options_tcpport_set
    __swig_getmethods__["tcpport"] = _ccextractorapi.ccx_s_options_tcpport_get
    if _newclass:
        tcpport = _swig_property(_ccextractorapi.ccx_s_options_tcpport_get, _ccextractorapi.ccx_s_options_tcpport_set)
    __swig_setmethods__["tcp_password"] = _ccextractorapi.ccx_s_options_tcp_password_set
    __swig_getmethods__["tcp_password"] = _ccextractorapi.ccx_s_options_tcp_password_get
    if _newclass:
        tcp_password = _swig_property(_ccextractorapi.ccx_s_options_tcp_password_get, _ccextractorapi.ccx_s_options_tcp_password_set)
    __swig_setmethods__["tcp_desc"] = _ccextractorapi.ccx_s_options_tcp_desc_set
    __swig_getmethods__["tcp_desc"] = _ccextractorapi.ccx_s_options_tcp_desc_get
    if _newclass:
        tcp_desc = _swig_property(_ccextractorapi.ccx_s_options_tcp_desc_get, _ccextractorapi.ccx_s_options_tcp_desc_set)
    __swig_setmethods__["srv_addr"] = _ccextractorapi.ccx_s_options_srv_addr_set
    __swig_getmethods__["srv_addr"] = _ccextractorapi.ccx_s_options_srv_addr_get
    if _newclass:
        srv_addr = _swig_property(_ccextractorapi.ccx_s_options_srv_addr_get, _ccextractorapi.ccx_s_options_srv_addr_set)
    __swig_setmethods__["srv_port"] = _ccextractorapi.ccx_s_options_srv_port_set
    __swig_getmethods__["srv_port"] = _ccextractorapi.ccx_s_options_srv_port_get
    if _newclass:
        srv_port = _swig_property(_ccextractorapi.ccx_s_options_srv_port_get, _ccextractorapi.ccx_s_options_srv_port_set)
    __swig_setmethods__["noautotimeref"] = _ccextractorapi.ccx_s_options_noautotimeref_set
    __swig_getmethods__["noautotimeref"] = _ccextractorapi.ccx_s_options_noautotimeref_get
    if _newclass:
        noautotimeref = _swig_property(_ccextractorapi.ccx_s_options_noautotimeref_get, _ccextractorapi.ccx_s_options_noautotimeref_set)
    __swig_setmethods__["input_source"] = _ccextractorapi.ccx_s_options_input_source_set
    __swig_getmethods__["input_source"] = _ccextractorapi.ccx_s_options_input_source_get
    if _newclass:
        input_source = _swig_property(_ccextractorapi.ccx_s_options_input_source_get, _ccextractorapi.ccx_s_options_input_source_set)
    __swig_setmethods__["output_filename"] = _ccextractorapi.ccx_s_options_output_filename_set
    __swig_getmethods__["output_filename"] = _ccextractorapi.ccx_s_options_output_filename_get
    if _newclass:
        output_filename = _swig_property(_ccextractorapi.ccx_s_options_output_filename_get, _ccextractorapi.ccx_s_options_output_filename_set)
    __swig_setmethods__["inputfile"] = _ccextractorapi.ccx_s_options_inputfile_set
    __swig_getmethods__["inputfile"] = _ccextractorapi.ccx_s_options_inputfile_get
    if _newclass:
        inputfile = _swig_property(_ccextractorapi.ccx_s_options_inputfile_get, _ccextractorapi.ccx_s_options_inputfile_set)
    __swig_setmethods__["num_input_files"] = _ccextractorapi.ccx_s_options_num_input_files_set
    __swig_getmethods__["num_input_files"] = _ccextractorapi.ccx_s_options_num_input_files_get
    if _newclass:
        num_input_files = _swig_property(_ccextractorapi.ccx_s_options_num_input_files_get, _ccextractorapi.ccx_s_options_num_input_files_set)
    __swig_setmethods__["demux_cfg"] = _ccextractorapi.ccx_s_options_demux_cfg_set
    __swig_getmethods__["demux_cfg"] = _ccextractorapi.ccx_s_options_demux_cfg_get
    if _newclass:
        demux_cfg = _swig_property(_ccextractorapi.ccx_s_options_demux_cfg_get, _ccextractorapi.ccx_s_options_demux_cfg_set)
    __swig_setmethods__["enc_cfg"] = _ccextractorapi.ccx_s_options_enc_cfg_set
    __swig_getmethods__["enc_cfg"] = _ccextractorapi.ccx_s_options_enc_cfg_get
    if _newclass:
        enc_cfg = _swig_property(_ccextractorapi.ccx_s_options_enc_cfg_get, _ccextractorapi.ccx_s_options_enc_cfg_set)
    __swig_setmethods__["subs_delay"] = _ccextractorapi.ccx_s_options_subs_delay_set
    __swig_getmethods__["subs_delay"] = _ccextractorapi.ccx_s_options_subs_delay_get
    if _newclass:
        subs_delay = _swig_property(_ccextractorapi.ccx_s_options_subs_delay_get, _ccextractorapi.ccx_s_options_subs_delay_set)
    __swig_setmethods__["cc_to_stdout"] = _ccextractorapi.ccx_s_options_cc_to_stdout_set
    __swig_getmethods__["cc_to_stdout"] = _ccextractorapi.ccx_s_options_cc_to_stdout_get
    if _newclass:
        cc_to_stdout = _swig_property(_ccextractorapi.ccx_s_options_cc_to_stdout_get, _ccextractorapi.ccx_s_options_cc_to_stdout_set)
    __swig_setmethods__["pes_header_to_stdout"] = _ccextractorapi.ccx_s_options_pes_header_to_stdout_set
    __swig_getmethods__["pes_header_to_stdout"] = _ccextractorapi.ccx_s_options_pes_header_to_stdout_get
    if _newclass:
        pes_header_to_stdout = _swig_property(_ccextractorapi.ccx_s_options_pes_header_to_stdout_get, _ccextractorapi.ccx_s_options_pes_header_to_stdout_set)
    __swig_setmethods__["dvb_debug_traces_to_stdout"] = _ccextractorapi.ccx_s_options_dvb_debug_traces_to_stdout_set
    __swig_getmethods__["dvb_debug_traces_to_stdout"] = _ccextractorapi.ccx_s_options_dvb_debug_traces_to_stdout_get
    if _newclass:
        dvb_debug_traces_to_stdout = _swig_property(_ccextractorapi.ccx_s_options_dvb_debug_traces_to_stdout_get, _ccextractorapi.ccx_s_options_dvb_debug_traces_to_stdout_set)
    __swig_setmethods__["ignore_pts_jumps"] = _ccextractorapi.ccx_s_options_ignore_pts_jumps_set
    __swig_getmethods__["ignore_pts_jumps"] = _ccextractorapi.ccx_s_options_ignore_pts_jumps_get
    if _newclass:
        ignore_pts_jumps = _swig_property(_ccextractorapi.ccx_s_options_ignore_pts_jumps_get, _ccextractorapi.ccx_s_options_ignore_pts_jumps_set)
    __swig_setmethods__["multiprogram"] = _ccextractorapi.ccx_s_options_multiprogram_set
    __swig_getmethods__["multiprogram"] = _ccextractorapi.ccx_s_options_multiprogram_get
    if _newclass:
        multiprogram = _swig_property(_ccextractorapi.ccx_s_options_multiprogram_get, _ccextractorapi.ccx_s_options_multiprogram_set)
    __swig_setmethods__["out_interval"] = _ccextractorapi.ccx_s_options_out_interval_set
    __swig_getmethods__["out_interval"] = _ccextractorapi.ccx_s_options_out_interval_get
    if _newclass:
        out_interval = _swig_property(_ccextractorapi.ccx_s_options_out_interval_get, _ccextractorapi.ccx_s_options_out_interval_set)
    __swig_setmethods__["myarguments"] = _ccextractorapi.ccx_s_options_myarguments_set
    __swig_getmethods__["myarguments"] = _ccextractorapi.ccx_s_options_myarguments_get
    if _newclass:
        myarguments = _swig_property(_ccextractorapi.ccx_s_options_myarguments_get, _ccextractorapi.ccx_s_options_myarguments_set)
    __swig_setmethods__["argument_count"] = _ccextractorapi.ccx_s_options_argument_count_set
    __swig_getmethods__["argument_count"] = _ccextractorapi.ccx_s_options_argument_count_get
    if _newclass:
        argument_count = _swig_property(_ccextractorapi.ccx_s_options_argument_count_get, _ccextractorapi.ccx_s_options_argument_count_set)

    def __init__(self):
        this = _ccextractorapi.new_ccx_s_options()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _ccextractorapi.delete_ccx_s_options
    __del__ = lambda self: None
ccx_s_options_swigregister = _ccextractorapi.ccx_s_options_swigregister
ccx_s_options_swigregister(ccx_s_options)


def init_options(options):
    return _ccextractorapi.init_options(options)
init_options = _ccextractorapi.init_options

def processmp4(ctx, cfg, file):
    return _ccextractorapi.processmp4(ctx, cfg, file)
processmp4 = _ccextractorapi.processmp4

def dumpchapters(ctx, cfg, file):
    return _ccextractorapi.dumpchapters(ctx, cfg, file)
dumpchapters = _ccextractorapi.dumpchapters

def sigusr1_handler(sig):
    return _ccextractorapi.sigusr1_handler(sig)
sigusr1_handler = _ccextractorapi.sigusr1_handler

def sigterm_handler(sig):
    return _ccextractorapi.sigterm_handler(sig)
sigterm_handler = _ccextractorapi.sigterm_handler

def sigint_handler(sig):
    return _ccextractorapi.sigint_handler(sig)
sigint_handler = _ccextractorapi.sigint_handler

def api_init_options():
    return _ccextractorapi.api_init_options()
api_init_options = _ccextractorapi.api_init_options

def checking_configuration_file(api_options):
    return _ccextractorapi.checking_configuration_file(api_options)
checking_configuration_file = _ccextractorapi.checking_configuration_file

def compile_params(api_options, argc):
    return _ccextractorapi.compile_params(api_options, argc)
compile_params = _ccextractorapi.compile_params

def api_add_param(api_options, arg):
    return _ccextractorapi.api_add_param(api_options, arg)
api_add_param = _ccextractorapi.api_add_param

def main():
    return _ccextractorapi.main()
main = _ccextractorapi.main
# This file is compatible with both classic and new-style classes.


